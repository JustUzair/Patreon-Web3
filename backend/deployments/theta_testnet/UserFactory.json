{
  "address": "0xFaE98aDA8c60948679bA4f72DC5bbe2f6F3F8C28",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountRecaudedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_bronzePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_silverPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_goldPrice",
          "type": "uint256"
        }
      ],
      "name": "createProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createdProfiles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCreators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorAddress",
          "type": "address"
        }
      ],
      "name": "getCreatorContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorAddress",
          "type": "address"
        }
      ],
      "name": "isSignedUp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recaudeFees",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "suscriptionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userProfile",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x315b25236b451a8d5a3569b391f395e8a9f8f0ed758307da01fd0b8ff0bd7cb0",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xDc11dE6060e0f6011B6c07bB2C0278d7cB5B57EE",
    "contractAddress": "0xFaE98aDA8c60948679bA4f72DC5bbe2f6F3F8C28",
    "transactionIndex": 1,
    "gasUsed": "6517140",
    "logsBloom": "0x
    "blockHash": "0x1f74873d50538ff19f51960a57a393aa07ed0a45f9ca074f5342ace2cc50a0c8",
    "transactionHash": "0x315b25236b451a8d5a3569b391f395e8a9f8f0ed758307da01fd0b8ff0bd7cb0",
    "logs": [],
    "blockNumber": 21000127,
    "cumulativeGasUsed": "6517140",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 23,
  "solcInputHash": "70c52c6869ebb2d3f46e64e945254c7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRecaudedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_bronzePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_silverPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_goldPrice\",\"type\":\"uint256\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdProfiles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCreators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorAddress\",\"type\":\"address\"}],\"name\":\"getCreatorContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorAddress\",\"type\":\"address\"}],\"name\":\"isSignedUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recaudeFees\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suscriptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UserFactory.sol\":\"UserFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/UserFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./UserProfile.sol\\\";\\r\\n\\r\\ncontract UserFactory {\\r\\n\\r\\n    address[] public createdProfiles;\\r\\n    mapping(string=>address) public userProfile;\\r\\n    mapping(address=>address) public creatorContract;\\r\\n    address public admin;\\r\\n    uint public suscriptionFee; //20% of 100\\r\\n    uint public amountRecaudedFees;\\r\\n\\r\\n    constructor(){\\r\\n        admin = msg.sender;\\r\\n        suscriptionFee = 20;\\r\\n    }\\r\\n\\r\\n    function createProfile(string memory _tokenName,string memory _tokenSymbol,\\r\\n    string memory _name,string memory _description,uint _bronzePrice,uint _silverPrice,uint _goldPrice) public\\r\\n    {\\r\\n        address profileAddress = userProfile[_name];\\r\\n        require(creatorContract[msg.sender] == address(0),\\\"address already has an account\\\");\\r\\n        require(profileAddress == address(0));\\r\\n        UserProfile newUser = new UserProfile(_tokenName,_tokenSymbol,msg.sender,_name,_description, _bronzePrice, _silverPrice, _goldPrice,suscriptionFee);\\r\\n        address addr = address(newUser);\\r\\n        //add the created profile to store data variables\\r\\n        createdProfiles.push(addr);\\r\\n        userProfile[_name] = addr;\\r\\n        creatorContract[msg.sender] = addr;\\r\\n    }\\r\\n    function isSignedUp(address _creatorAddress) external view returns(bool){\\r\\n        if(creatorContract[_creatorAddress] == address(0)) return false;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function recaudeFees()external payable{\\r\\n        amountRecaudedFees += msg.value;\\r\\n    }\\r\\n\\r\\n    function withdrawFees(address payable _to)public{\\r\\n        require(msg.sender==admin);\\r\\n        _to.transfer(amountRecaudedFees);\\r\\n        amountRecaudedFees = 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getCreatorContractAddress(address _creatorAddress) external view returns(address){\\r\\n        return creatorContract[_creatorAddress];\\r\\n        \\r\\n    }\\r\\n\\r\\n    \\r\\n    function getAllCreators() public view returns(address[] memory){\\r\\n        return createdProfiles;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\",\"keccak256\":\"0x1d53beac86cde842fefdff224da9b86b29f53adc3f1d8e63a853da2cd5ccd531\",\"license\":\"MIT\"},\"contracts/UserProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./UserFactory.sol\\\";\\r\\n\\r\\ncontract UserProfile is ERC721, Ownable {\\r\\n\\r\\n    struct VideoData {\\r\\n        string name;\\r\\n        string videoURL;\\r\\n        string description;\\r\\n        bool hidden;\\r\\n        uint tier;\\r\\n        // string previewVideoImage; //??maybe\\r\\n    }\\r\\n\\r\\n    struct Tier{\\r\\n        string name;\\r\\n        uint price;//required $ have to pay for subscribe, in drop(wei of tfuel)\\r\\n        uint suscriptionsAmount;\\r\\n    }\\r\\n\\r\\n    //FACTORY CONTRACT\\r\\n    address factoryContractAddr;\\r\\n\\r\\n    //USER PROFILE LOGIC\\r\\n    string public profileName;\\r\\n    string public profileDescription;\\r\\n\\r\\n\\r\\n    //BUISNESS LOGIC\\r\\n    uint public tokenIdNumber;//amount tokens released\\r\\n    uint public amountPublishedVideos;\\r\\n    VideoData[] public publishedVideos;\\r\\n    mapping(string=>uint) public videosIndex;\\r\\n    uint public amountCreator; //amount creator have to withdraw\\r\\n    uint public totalDonated; //total amount donated, analytics, this variable have not use yet\\r\\n    uint public suscriptionFee; //20% of 100\\r\\n\\r\\n    //TIERS LOGIC\\r\\n    mapping(address=>uint) public userTier; //tier of each user 1-bronze 2-silver 3-gold\\r\\n    mapping(uint=>Tier) public tierData;\\r\\n\\r\\n    //SUBSCRIPTION LOGIC\\r\\n    uint public subscriptionDuration = 30 days; //30 days\\r\\n    //mapping subscriber to due date\\r\\n    mapping(address=>uint) public subscriberDueDate;\\r\\n    //mapping subscriber to last paid\\r\\n    mapping(address=>uint) public subscriberLastPaid;\\r\\n\\r\\n    mapping(address=>bool) userSubscribed;  //PREVENT MULTIPLE SUBSCRIPTIONS FROM SAME USER\\r\\n\\r\\n\\r\\n    constructor(string memory _tokenName,string memory _tokenSymbol,address _sender,string memory _name,\\r\\n    string memory _description,uint _bronzePrice,uint _silverPrice,uint _goldPrice,uint _suscriptionFee) ERC721(_tokenName,_tokenSymbol) \\r\\n    {\\r\\n        factoryContractAddr = msg.sender;\\r\\n        _transferOwnership(_sender);\\r\\n        profileName = _name;\\r\\n        profileDescription = _description;\\r\\n        suscriptionFee = _suscriptionFee;\\r\\n        //* 1000000; //convert tfuel to drop\\r\\n        //create tiers\\r\\n        tierData[1] = Tier(\\\"bronze\\\",_bronzePrice * 1000000,0);\\r\\n        tierData[2] = Tier(\\\"silver\\\",_silverPrice * 1000000,0);\\r\\n        tierData[3] = Tier(\\\"gold\\\",_goldPrice * 1000000,0);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function userSubscribe(uint _tier) public payable {\\r\\n        //existing tier\\r\\n        require(_tier>=1,\\\"invalid tier\\\");\\r\\n        require(_tier<=3,\\\"invalid tier\\\");            \\r\\n        require(msg.value > tierData[_tier].price);\\r\\n            \\r\\n        //fees logic\\r\\n        UserFactory factoryContract = UserFactory(factoryContractAddr);\\r\\n        uint organizationFees = suscriptionFee * msg.value/100;            \\r\\n\\r\\n        //if user does not own NFT\\r\\n        if(balanceOf(msg.sender) == 0) {\\r\\n            //mint nft\\r\\n            tokenIdNumber = tokenIdNumber + 1;\\r\\n            _safeMint(msg.sender, tokenIdNumber);  \\r\\n           \\r\\n           //recaude fees\\r\\n            factoryContract.recaudeFees{value:organizationFees}();\\r\\n            amountCreator += msg.value - organizationFees;\\r\\n\\r\\n            userSubscribed[msg.sender] = true;\\r\\n\\r\\n            subscriberDueDate[msg.sender] = block.timestamp + subscriptionDuration;\\r\\n            subscriberLastPaid[msg.sender] = block.timestamp;\\r\\n            userTier[msg.sender] = _tier;\\r\\n            tierData[_tier].suscriptionsAmount += 1;\\r\\n\\r\\n        }\\r\\n        //if user owns NFT, check if they have paid their subscription, if not pay and update due date and subscription status\\r\\n        else {\\r\\n            require(userSubscribed[msg.sender] == false,\\\"user already subscribed\\\");\\r\\n            //recaude fees\\r\\n            factoryContract.recaudeFees{value:organizationFees}();\\r\\n            amountCreator += msg.value - organizationFees;\\r\\n            //renew suscription\\r\\n            userSubscribed[msg.sender] = true;\\r\\n            subscriberDueDate[msg.sender] = block.timestamp + subscriptionDuration;\\r\\n            subscriberLastPaid[msg.sender] = block.timestamp;\\r\\n            userTier[msg.sender] = _tier;\\r\\n            tierData[_tier].suscriptionsAmount += 1;\\r\\n\\r\\n\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //check if all users have paid their monthly subscription, if not, remove their subscription if they have not paid\\r\\n    function checkSubscribers() public {\\r\\n        uint _tokenIdNumber = tokenIdNumber;\\r\\n        for(uint i = 0; i <_tokenIdNumber; i++){\\r\\n            address _owner = ownerOf(i);\\r\\n            if(subscriberDueDate[_owner] < block.timestamp){\\r\\n                userSubscribed[_owner] = false;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function donate()public payable{\\r\\n\\r\\n        //fees logic\\r\\n        UserFactory factoryContract = UserFactory(factoryContractAddr);\\r\\n        uint organizationFees = suscriptionFee * msg.value/100; \\r\\n        //distribute fees\\r\\n        factoryContract.recaudeFees{value:organizationFees}();\\r\\n        amountCreator += msg.value - organizationFees;\\r\\n        totalDonated += msg.value;\\r\\n\\r\\n    }\\r\\n\\r\\n    // restricted to owner\\r\\n    function addVideo(string memory _name, string memory _videoURL, string memory _description,uint _tier) public onlyOwner{\\r\\n        //prevent user reupload videos\\r\\n        require(videosIndex[_videoURL] == 0);\\r\\n        //index the video\\r\\n        amountPublishedVideos += 1;\\r\\n        videosIndex[_videoURL] = amountPublishedVideos;\\r\\n        //add video data\\r\\n        publishedVideos.push(VideoData(_name,_videoURL,_description,false,_tier));\\r\\n        //check subscribers\\r\\n        checkSubscribers();\\r\\n        \\r\\n    }\\r\\n\\r\\n    // restricted to owner //withdraws subscriptions and donations amount\\r\\n    function withdrawAmount() public onlyOwner{\\r\\n        address owner = owner();\\r\\n\\r\\n        payable(owner).transfer(amountCreator);\\r\\n        amountCreator = 0;\\r\\n        //check subscribers\\r\\n        checkSubscribers();\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getOwner()external view returns(address){\\r\\n        address owner = owner();\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function getVideosData() public view returns( VideoData[] memory){\\r\\n        //IMPLEMENT QUERY BY INDEX\\r\\n\\r\\n        return publishedVideos;\\r\\n    }\\r\\n\\r\\n    function hideVideo(string memory _videoUrl) public onlyOwner{\\r\\n        //get video index\\r\\n        uint _videoIndex = videosIndex[_videoUrl];\\r\\n        //require video exists\\r\\n        require(_videoIndex > 0);\\r\\n        //mark video as hide\\r\\n        publishedVideos[_videoIndex - 1].hidden = true; //[_videoIndex - 1] because index count start at 1 for prevent bugs\\r\\n        //check subscribers\\r\\n        checkSubscribers();\\r\\n        \\r\\n    }\\r\\n\\r\\n    function showVideo(string memory _videoUrl) public onlyOwner{\\r\\n        //get video index\\r\\n        uint _videoIndex = videosIndex[_videoUrl];\\r\\n        //require video exists\\r\\n        require(_videoIndex > 0);\\r\\n        //mark video as hide\\r\\n        publishedVideos[_videoIndex - 1].hidden = false; //[_videoIndex - 1] because index count start at 1 for prevent bugs\\r\\n        //check subscribers\\r\\n        checkSubscribers();\\r\\n    }\\r\\n\\r\\n    function getProfileData() external view returns(string memory,string memory,uint,uint,uint,Tier memory,Tier memory,Tier memory){\\r\\n        return (profileName,profileDescription,tokenIdNumber,amountPublishedVideos,amountCreator,tierData[1],tierData[2],tierData[3]);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isSubscribed(address _sender) external view returns(bool){\\r\\n        return userSubscribed[_sender];\\r\\n    }\\r\\n\\r\\n\\r\\n   /**\\r\\n     * \\r\\n     * @notice remove approve and transfer functions for prevent users transfer tokens.\\r\\n     * \\r\\n    */\\r\\n\\r\\n    //override approve function for prevent approve\\r\\n    function approve(address to, uint256 tokenId) public override{\\r\\n        require(false);\\r\\n    }\\r\\n    //override setApprovalForAll function for prevent approve\\r\\n    function setApprovalForAll(address operator, bool approved) public override{\\r\\n        require(false);\\r\\n    }\\r\\n\\r\\n    //override transferFrom function for prevent transfer\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override{\\r\\n        require(false);\\r\\n    }\\r\\n\\r\\n    //override safeTransferFrom function for prevent transfer\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override{\\r\\n        require(false);\\r\\n    }\\r\\n\\r\\n    //override safeTransferFrom function for prevent transfer\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override{\\r\\n        require(false);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x117d390106e2233e6bd582bc23565dcec24eecb1313493b28637dcdf311d45fc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506014600481905550615f8a806100696000396000f3fe608060405260043610620000b65760003560e01c8063aae83c82116200006d578063aae83c821462000213578063c2d8e1ad1462000243578063eb8cdd341462000287578063f193e1a51462000293578063f851a44014620002d7578063f97fac4d146200030757620000b6565b8063164e68de14620000bb57806322b6ffca14620000e957806327537498146200012d57806334af431d146200015d5780633de6053a14620001a1578063588a168214620001e5575b600080fd5b348015620000c857600080fd5b50620000e76004803603810190620000e1919062000a0b565b62000337565b005b348015620000f657600080fd5b506200011560048036038101906200010f919062000a82565b620003e7565b60405162000124919062000ad1565b60405180910390f35b3480156200013a57600080fd5b506200014562000490565b60405162000154919062000b09565b60405180910390f35b3480156200016a57600080fd5b5062000189600480360381019062000183919062000a82565b62000496565b60405162000198919062000b37565b60405180910390f35b348015620001ae57600080fd5b50620001cd6004803603810190620001c7919062000a82565b620004c9565b604051620001dc919062000b37565b60405180910390f35b348015620001f257600080fd5b506200021160048036038101906200020b919062000ce7565b62000532565b005b3480156200022057600080fd5b506200022b62000822565b6040516200023a919062000b09565b60405180910390f35b3480156200025057600080fd5b506200026f600480360381019062000269919062000e16565b62000828565b6040516200027e919062000b37565b60405180910390f35b6200029162000871565b005b348015620002a057600080fd5b50620002bf6004803603810190620002b9919062000e67565b6200088e565b604051620002ce919062000b37565b60405180910390f35b348015620002e457600080fd5b50620002ef620008ce565b604051620002fe919062000b37565b60405180910390f35b3480156200031457600080fd5b506200031f620008f4565b6040516200032e919062000f67565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200039257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6005549081150290604051600060405180830381858888f19350505050158015620003db573d6000803e3d6000fd5b50600060058190555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036200048657600090506200048b565b600190505b919050565b60045481565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060018660405162000546919062001004565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000648576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063f906200107e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200068257600080fd5b600088883389898989896004546040516200069d9062000984565b620006b199989796959493929190620010e1565b604051809103906000f080158015620006ce573d6000803e3d6000fd5b50905060008190506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001896040516200074c919062001004565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b60055481565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3460056000828254620008859190620011cb565b92505081905550565b600081815481106200089f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200097a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200092f575b5050505050905090565b614d4e806200120783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620009d382620009a6565b9050919050565b620009e581620009c6565b8114620009f157600080fd5b50565b60008135905062000a0581620009da565b92915050565b60006020828403121562000a245762000a236200099c565b5b600062000a3484828501620009f4565b91505092915050565b600062000a4a82620009a6565b9050919050565b62000a5c8162000a3d565b811462000a6857600080fd5b50565b60008135905062000a7c8162000a51565b92915050565b60006020828403121562000a9b5762000a9a6200099c565b5b600062000aab8482850162000a6b565b91505092915050565b60008115159050919050565b62000acb8162000ab4565b82525050565b600060208201905062000ae8600083018462000ac0565b92915050565b6000819050919050565b62000b038162000aee565b82525050565b600060208201905062000b20600083018462000af8565b92915050565b62000b318162000a3d565b82525050565b600060208201905062000b4e600083018462000b26565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000ba98262000b5e565b810181811067ffffffffffffffff8211171562000bcb5762000bca62000b6f565b5b80604052505050565b600062000be062000992565b905062000bee828262000b9e565b919050565b600067ffffffffffffffff82111562000c115762000c1062000b6f565b5b62000c1c8262000b5e565b9050602081019050919050565b82818337600083830152505050565b600062000c4f62000c498462000bf3565b62000bd4565b90508281526020810184848401111562000c6e5762000c6d62000b59565b5b62000c7b84828562000c29565b509392505050565b600082601f83011262000c9b5762000c9a62000b54565b5b813562000cad84826020860162000c38565b91505092915050565b62000cc18162000aee565b811462000ccd57600080fd5b50565b60008135905062000ce18162000cb6565b92915050565b600080600080600080600060e0888a03121562000d095762000d086200099c565b5b600088013567ffffffffffffffff81111562000d2a5762000d29620009a1565b5b62000d388a828b0162000c83565b975050602088013567ffffffffffffffff81111562000d5c5762000d5b620009a1565b5b62000d6a8a828b0162000c83565b965050604088013567ffffffffffffffff81111562000d8e5762000d8d620009a1565b5b62000d9c8a828b0162000c83565b955050606088013567ffffffffffffffff81111562000dc05762000dbf620009a1565b5b62000dce8a828b0162000c83565b945050608062000de18a828b0162000cd0565b93505060a062000df48a828b0162000cd0565b92505060c062000e078a828b0162000cd0565b91505092959891949750929550565b60006020828403121562000e2f5762000e2e6200099c565b5b600082013567ffffffffffffffff81111562000e505762000e4f620009a1565b5b62000e5e8482850162000c83565b91505092915050565b60006020828403121562000e805762000e7f6200099c565b5b600062000e908482850162000cd0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000ed08162000a3d565b82525050565b600062000ee4838362000ec5565b60208301905092915050565b6000602082019050919050565b600062000f0a8262000e99565b62000f16818562000ea4565b935062000f238362000eb5565b8060005b8381101562000f5a57815162000f3e888262000ed6565b975062000f4b8362000ef0565b92505060018101905062000f27565b5085935050505092915050565b6000602082019050818103600083015262000f83818462000efd565b905092915050565b600081519050919050565b600081905092915050565b60005b8381101562000fc157808201518184015260208101905062000fa4565b60008484015250505050565b600062000fda8262000f8b565b62000fe6818562000f96565b935062000ff881856020860162000fa1565b80840191505092915050565b600062001012828462000fcd565b915081905092915050565b600082825260208201905092915050565b7f6164647265737320616c72656164792068617320616e206163636f756e740000600082015250565b600062001066601e836200101d565b915062001073826200102e565b602082019050919050565b60006020820190508181036000830152620010998162001057565b9050919050565b6000620010ad8262000f8b565b620010b981856200101d565b9350620010cb81856020860162000fa1565b620010d68162000b5e565b840191505092915050565b6000610120820190508181036000830152620010fe818c620010a0565b9050818103602083015262001114818b620010a0565b905062001125604083018a62000b26565b8181036060830152620011398189620010a0565b905081810360808301526200114f8188620010a0565b90506200116060a083018762000af8565b6200116f60c083018662000af8565b6200117e60e083018562000af8565b6200118e61010083018462000af8565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620011d88262000aee565b9150620011e58362000aee565b92508282019050808211156200120057620011ff6200119c565b5b9291505056fe608060405262278d006013553480156200001857600080fd5b5060405162004d4e38038062004d4e83398181016040528101906200003e9190620005ff565b888881600090816200005191906200099b565b5080600190816200006391906200099b565b505050620000866200007a620002fe60201b60201c565b6200030660201b60201c565b33600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000d8876200030660201b60201c565b8560089081620000e991906200099b565b508460099081620000fb91906200099b565b508060108190555060405180606001604052806040518060400160405280600681526020017f62726f6e7a6500000000000000000000000000000000000000000000000000008152508152602001620f4240866200015a919062000ab1565b81526020016000815250601260006001815260200190815260200160002060008201518160000190816200018f91906200099b565b50602082015181600101556040820151816002015590505060405180606001604052806040518060400160405280600681526020017f73696c76657200000000000000000000000000000000000000000000000000008152508152602001620f424085620001fe919062000ab1565b81526020016000815250601260006002815260200190815260200160002060008201518160000190816200023391906200099b565b50602082015181600101556040820151816002015590505060405180606001604052806040518060400160405280600481526020017f676f6c64000000000000000000000000000000000000000000000000000000008152508152602001620f424084620002a2919062000ab1565b8152602001600081525060126000600381526020019081526020016000206000820151816000019081620002d791906200099b565b50602082015181600101556040820151816002015590505050505050505050505062000afc565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043582620003ea565b810181811067ffffffffffffffff82111715620004575762000456620003fb565b5b80604052505050565b60006200046c620003cc565b90506200047a82826200042a565b919050565b600067ffffffffffffffff8211156200049d576200049c620003fb565b5b620004a882620003ea565b9050602081019050919050565b60005b83811015620004d5578082015181840152602081019050620004b8565b60008484015250505050565b6000620004f8620004f2846200047f565b62000460565b905082815260208101848484011115620005175762000516620003e5565b5b62000524848285620004b5565b509392505050565b600082601f830112620005445762000543620003e0565b5b815162000556848260208601620004e1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200058c826200055f565b9050919050565b6200059e816200057f565b8114620005aa57600080fd5b50565b600081519050620005be8162000593565b92915050565b6000819050919050565b620005d981620005c4565b8114620005e557600080fd5b50565b600081519050620005f981620005ce565b92915050565b60008060008060008060008060006101208a8c031215620006255762000624620003d6565b5b60008a015167ffffffffffffffff811115620006465762000645620003db565b5b620006548c828d016200052c565b99505060208a015167ffffffffffffffff811115620006785762000677620003db565b5b620006868c828d016200052c565b9850506040620006998c828d01620005ad565b97505060608a015167ffffffffffffffff811115620006bd57620006bc620003db565b5b620006cb8c828d016200052c565b96505060808a015167ffffffffffffffff811115620006ef57620006ee620003db565b5b620006fd8c828d016200052c565b95505060a0620007108c828d01620005e8565b94505060c0620007238c828d01620005e8565b93505060e0620007368c828d01620005e8565b9250506101006200074a8c828d01620005e8565b9150509295985092959850929598565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007ad57607f821691505b602082108103620007c357620007c262000765565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200082d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007ee565b620008398683620007ee565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200087c620008766200087084620005c4565b62000851565b620005c4565b9050919050565b6000819050919050565b62000898836200085b565b620008b0620008a78262000883565b848454620007fb565b825550505050565b600090565b620008c7620008b8565b620008d48184846200088d565b505050565b5b81811015620008fc57620008f0600082620008bd565b600181019050620008da565b5050565b601f8211156200094b576200091581620007c9565b6200092084620007de565b8101602085101562000930578190505b620009486200093f85620007de565b830182620008d9565b50505b505050565b600082821c905092915050565b6000620009706000198460080262000950565b1980831691505092915050565b60006200098b83836200095d565b9150826002028217905092915050565b620009a6826200075a565b67ffffffffffffffff811115620009c257620009c1620003fb565b5b620009ce825462000794565b620009db82828562000900565b600060209050601f83116001811462000a135760008415620009fe578287015190505b62000a0a85826200097d565b86555062000a7a565b601f19841662000a2386620007c9565b60005b8281101562000a4d5784890151825560018201915060208501945060208101905062000a26565b8683101562000a6d578489015162000a69601f8916826200095d565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000abe82620005c4565b915062000acb83620005c4565b925082820262000adb81620005c4565b9150828204841483151762000af55762000af462000a82565b5b5092915050565b6142428062000b0c6000396000f3fe6080604052600436106102455760003560e01c80637a94a63311610139578063b88d4fde116100b6578063c87b56dd1161007a578063c87b56dd146108a0578063de4529eb146108dd578063e0ded7761461091a578063e985e9c514610936578063ed88c68e14610973578063f2fde38b1461097d57610245565b8063b88d4fde146107a7578063b92ae87c146107d0578063bcb2226a1461080d578063c5da76041461084a578063c707944b1461087557610245565b80638da5cb5b116100fd5780638da5cb5b146106d257806395d89b41146106fd578063a22cb46514610728578063a3e3981114610751578063b1d140681461077c57610245565b80637a94a633146105e25780637efab5f31461060d5780638356c1e11461064c578063863678e91461067e578063893d20e8146106a757610245565b806327537498116101c7578063534844a21161018b578063534844a2146104fd5780636352211e1461051457806370a0823114610551578063715018a61461058e5780637235d7d9146105a557610245565b8063275374981461041457806327e25dcc1461043f5780632ae25fd2146104805780632dc282e9146104a957806342842e0e146104d457610245565b8063095ea7b31161020e578063095ea7b31461033157806309c2e0d21461035a5780631dbe69d41461038357806321c7557c146103ae57806323b872dd146103eb57610245565b8062b370441461024a57806301ffc9a71461027557806302d17a15146102b257806306fdde03146102c9578063081812fc146102f4575b600080fd5b34801561025657600080fd5b5061025f6109a6565b60405161026c9190612d39565b60405180910390f35b34801561028157600080fd5b5061029c60048036038101906102979190612dc0565b6109ac565b6040516102a99190612e08565b60405180910390f35b3480156102be57600080fd5b506102c7610a8e565b005b3480156102d557600080fd5b506102de610b65565b6040516102eb9190612eb3565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190612f01565b610bf7565b6040516103289190612f6f565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190612fb6565b610c3d565b005b34801561036657600080fd5b50610381600480360381019061037c919061312b565b610c4c565b005b34801561038f57600080fd5b50610398610d8f565b6040516103a59190613394565b60405180910390f35b3480156103ba57600080fd5b506103d560048036038101906103d091906133b6565b610fc9565b6040516103e29190612d39565b60405180910390f35b3480156103f757600080fd5b50610412600480360381019061040d91906133e3565b610fe1565b005b34801561042057600080fd5b50610429610ff1565b6040516104369190612d39565b60405180910390f35b34801561044b57600080fd5b5061046660048036038101906104619190612f01565b610ff7565b604051610477959493929190613436565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a2919061349e565b6111e2565b005b3480156104b557600080fd5b506104be611270565b6040516104cb9190612d39565b60405180910390f35b3480156104e057600080fd5b506104fb60048036038101906104f691906133e3565b611276565b005b34801561050957600080fd5b50610512611286565b005b34801561052057600080fd5b5061053b60048036038101906105369190612f01565b6112f6565b6040516105489190612f6f565b60405180910390f35b34801561055d57600080fd5b50610578600480360381019061057391906133b6565b61137c565b6040516105859190612d39565b60405180910390f35b34801561059a57600080fd5b506105a3611433565b005b3480156105b157600080fd5b506105cc60048036038101906105c7919061349e565b611447565b6040516105d99190612d39565b60405180910390f35b3480156105ee57600080fd5b506105f7611475565b6040516106049190612d39565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f9190612f01565b61147b565b604051610643939291906134e7565b60405180910390f35b34801561065857600080fd5b5061066161152d565b604051610675989796959493929190613575565b60405180910390f35b34801561068a57600080fd5b506106a560048036038101906106a0919061349e565b6118e4565b005b3480156106b357600080fd5b506106bc611972565b6040516106c99190612f6f565b60405180910390f35b3480156106de57600080fd5b506106e7611986565b6040516106f49190612f6f565b60405180910390f35b34801561070957600080fd5b506107126119b0565b60405161071f9190612eb3565b60405180910390f35b34801561073457600080fd5b5061074f600480360381019061074a9190613642565b611a42565b005b34801561075d57600080fd5b50610766611a51565b6040516107739190612eb3565b60405180910390f35b34801561078857600080fd5b50610791611adf565b60405161079e9190612d39565b60405180910390f35b3480156107b357600080fd5b506107ce60048036038101906107c99190613723565b611ae5565b005b3480156107dc57600080fd5b506107f760048036038101906107f291906133b6565b611af6565b6040516108049190612e08565b60405180910390f35b34801561081957600080fd5b50610834600480360381019061082f91906133b6565b611b4c565b6040516108419190612d39565b60405180910390f35b34801561085657600080fd5b5061085f611b64565b60405161086c9190612eb3565b60405180910390f35b34801561088157600080fd5b5061088a611bf2565b6040516108979190612d39565b60405180910390f35b3480156108ac57600080fd5b506108c760048036038101906108c29190612f01565b611bf8565b6040516108d49190612eb3565b60405180910390f35b3480156108e957600080fd5b5061090460048036038101906108ff91906133b6565b611c60565b6040516109119190612d39565b60405180910390f35b610934600480360381019061092f9190612f01565b611c78565b005b34801561094257600080fd5b5061095d600480360381019061095891906137a6565b6121fe565b60405161096a9190612e08565b60405180910390f35b61097b612292565b005b34801561098957600080fd5b506109a4600480360381019061099f91906133b6565b612379565b005b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a7757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a875750610a86826123fc565b5b9050919050565b6000600a54905060005b81811015610b61576000610aab826112f6565b905042601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b4d576000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b508080610b5990613815565b915050610a98565b5050565b606060008054610b749061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba09061388c565b8015610bed5780601f10610bc257610100808354040283529160200191610bed565b820191906000526020600020905b815481529060010190602001808311610bd057829003601f168201915b5050505050905090565b6000610c0282612466565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c4857600080fd5b5050565b610c546124b1565b6000600d84604051610c6691906138f9565b90815260200160405180910390205414610c7f57600080fd5b6001600b6000828254610c929190613910565b92505081905550600b54600d84604051610cac91906138f9565b908152602001604051809103902081905550600c6040518060a001604052808681526020018581526020018481526020016000151581526020018381525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000019081610d289190613af0565b506020820151816001019081610d3e9190613af0565b506040820151816002019081610d549190613af0565b5060608201518160030160006101000a81548160ff021916908315150217905550608082015181600401555050610d89610a8e565b50505050565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610fc057838290600052602060002090600502016040518060a0016040529081600082018054610de69061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e129061388c565b8015610e5f5780601f10610e3457610100808354040283529160200191610e5f565b820191906000526020600020905b815481529060010190602001808311610e4257829003601f168201915b50505050508152602001600182018054610e789061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea49061388c565b8015610ef15780601f10610ec657610100808354040283529160200191610ef1565b820191906000526020600020905b815481529060010190602001808311610ed457829003601f168201915b50505050508152602001600282018054610f0a9061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f369061388c565b8015610f835780601f10610f5857610100808354040283529160200191610f83565b820191906000526020600020905b815481529060010190602001808311610f6657829003601f168201915b505050505081526020016003820160009054906101000a900460ff1615151515815260200160048201548152505081526020019060010190610db3565b50505050905090565b60116020528060005260406000206000915090505481565b6000610fec57600080fd5b505050565b60105481565b600c818154811061100757600080fd5b906000526020600020906005020160009150905080600001805461102a9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546110569061388c565b80156110a35780601f10611078576101008083540402835291602001916110a3565b820191906000526020600020905b81548152906001019060200180831161108657829003601f168201915b5050505050908060010180546110b89061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546110e49061388c565b80156111315780601f1061110657610100808354040283529160200191611131565b820191906000526020600020905b81548152906001019060200180831161111457829003601f168201915b5050505050908060020180546111469061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546111729061388c565b80156111bf5780601f10611194576101008083540402835291602001916111bf565b820191906000526020600020905b8154815290600101906020018083116111a257829003601f168201915b5050505050908060030160009054906101000a900460ff16908060040154905085565b6111ea6124b1565b6000600d826040516111fc91906138f9565b90815260200160405180910390205490506000811161121a57600080fd5b6000600c60018361122b9190613bc2565b8154811061123c5761123b613bf6565b5b906000526020600020906005020160030160006101000a81548160ff02191690831515021790555061126c610a8e565b5050565b600b5481565b600061128157600080fd5b505050565b61128e6124b1565b6000611298611986565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f193505050501580156112e2573d6000803e3d6000fd5b506000600e819055506112f3610a8e565b50565b6000806113028361252f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136a90613c71565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390613d03565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61143b6124b1565b611445600061256c565b565b600d818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60135481565b601260205280600052604060002060009150905080600001805461149e9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546114ca9061388c565b80156115175780601f106114ec57610100808354040283529160200191611517565b820191906000526020600020905b8154815290600101906020018083116114fa57829003601f168201915b5050505050908060010154908060020154905083565b606080600080600061153d612cff565b611545612cff565b61154d612cff565b60086009600a54600b54600e546012600060018152602001908152602001600020601260006002815260200190815260200160002060126000600381526020019081526020016000208780546115a29061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546115ce9061388c565b801561161b5780601f106115f05761010080835404028352916020019161161b565b820191906000526020600020905b8154815290600101906020018083116115fe57829003601f168201915b5050505050975086805461162e9061388c565b80601f016020809104026020016040519081016040528092919081815260200182805461165a9061388c565b80156116a75780601f1061167c576101008083540402835291602001916116a7565b820191906000526020600020905b81548152906001019060200180831161168a57829003601f168201915b50505050509650826040518060600160405290816000820180546116ca9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546116f69061388c565b80156117435780601f1061171857610100808354040283529160200191611743565b820191906000526020600020905b81548152906001019060200180831161172657829003601f168201915b505050505081526020016001820154815260200160028201548152505092508160405180606001604052908160008201805461177e9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546117aa9061388c565b80156117f75780601f106117cc576101008083540402835291602001916117f7565b820191906000526020600020905b8154815290600101906020018083116117da57829003601f168201915b50505050508152602001600182015481526020016002820154815250509150806040518060600160405290816000820180546118329061388c565b80601f016020809104026020016040519081016040528092919081815260200182805461185e9061388c565b80156118ab5780601f10611880576101008083540402835291602001916118ab565b820191906000526020600020905b81548152906001019060200180831161188e57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050975097509750975097509750975097509091929394959697565b6118ec6124b1565b6000600d826040516118fe91906138f9565b90815260200160405180910390205490506000811161191c57600080fd5b6001600c60018361192d9190613bc2565b8154811061193e5761193d613bf6565b5b906000526020600020906005020160030160006101000a81548160ff02191690831515021790555061196e610a8e565b5050565b60008061197d611986565b90508091505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546119bf9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546119eb9061388c565b8015611a385780601f10611a0d57610100808354040283529160200191611a38565b820191906000526020600020905b815481529060010190602001808311611a1b57829003601f168201915b5050505050905090565b6000611a4d57600080fd5b5050565b60098054611a5e9061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8a9061388c565b8015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b505050505081565b600e5481565b6000611af057600080fd5b50505050565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60146020528060005260406000206000915090505481565b60088054611b719061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9d9061388c565b8015611bea5780601f10611bbf57610100808354040283529160200191611bea565b820191906000526020600020905b815481529060010190602001808311611bcd57829003601f168201915b505050505081565b600a5481565b6060611c0382612466565b6000611c0d612632565b90506000815111611c2d5760405180602001604052806000815250611c58565b80611c3784612649565b604051602001611c48929190613d23565b6040516020818303038152906040525b915050919050565b60156020528060005260406000206000915090505481565b6001811015611cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb390613d93565b60405180910390fd5b6003811115611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf790613d93565b60405180910390fd5b60126000828152602001908152602001600020600101543411611d2257600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606434601054611d5b9190613db3565b611d659190613e24565b90506000611d723361137c565b03611f81576001600a54611d869190613910565b600a81905550611d9833600a54612717565b8173ffffffffffffffffffffffffffffffffffffffff1663eb8cdd34826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611de057600080fd5b505af1158015611df4573d6000803e3d6000fd5b50505050508034611e059190613bc2565b600e6000828254611e169190613910565b925050819055506001601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060135442611e839190613910565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001601260008581526020019081526020016000206002016000828254611f759190613910565b925050819055506121f9565b60001515601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200b90613ea1565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663eb8cdd34826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561205c57600080fd5b505af1158015612070573d6000803e3d6000fd5b505050505080346120819190613bc2565b600e60008282546120929190613910565b925050819055506001601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601354426120ff9190613910565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016012600085815260200190815260200160002060020160008282546121f19190613910565b925050819055505b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064346010546122cb9190613db3565b6122d59190613e24565b90508173ffffffffffffffffffffffffffffffffffffffff1663eb8cdd34826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050505080346123449190613bc2565b600e60008282546123559190613910565b9250508190555034600f600082825461236e9190613910565b925050819055505050565b6123816124b1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e790613f33565b60405180910390fd5b6123f98161256c565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61246f81612735565b6124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590613c71565b60405180910390fd5b50565b6124b9612776565b73ffffffffffffffffffffffffffffffffffffffff166124d7611986565b73ffffffffffffffffffffffffffffffffffffffff161461252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490613f9f565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060405180602001604052806000815250905090565b6060600060016126588461277e565b01905060008167ffffffffffffffff81111561267757612676613000565b5b6040519080825280601f01601f1916602001820160405280156126a95781602001600182028036833780820191505090505b509050600082602001820190505b60011561270c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612700576126ff613df5565b5b049450600085036126b7575b819350505050919050565b6127318282604051806020016040528060008152506128d1565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166127578361252f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106127dc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816127d2576127d1613df5565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612819576d04ee2d6d415b85acef8100000000838161280f5761280e613df5565b5b0492506020810190505b662386f26fc10000831061284857662386f26fc10000838161283e5761283d613df5565b5b0492506010810190505b6305f5e1008310612871576305f5e100838161286757612866613df5565b5b0492506008810190505b612710831061289657612710838161288c5761288b613df5565b5b0492506004810190505b606483106128b957606483816128af576128ae613df5565b5b0492506002810190505b600a83106128c8576001810190505b80915050919050565b6128db838361292c565b6128e86000848484612b49565b612927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291e90614031565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361299b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129929061409d565b60405180910390fd5b6129a481612735565b156129e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129db90614109565b60405180910390fd5b6129f2600083836001612cd0565b6129fb81612735565b15612a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3290614109565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612b45600083836001612cd6565b5050565b6000612b6a8473ffffffffffffffffffffffffffffffffffffffff16612cdc565b15612cc3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b93612776565b8786866040518563ffffffff1660e01b8152600401612bb5949392919061417e565b6020604051808303816000875af1925050508015612bf157506040513d601f19601f82011682018060405250810190612bee91906141df565b60015b612c73573d8060008114612c21576040519150601f19603f3d011682016040523d82523d6000602084013e612c26565b606091505b506000815103612c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6290614031565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612cc8565b600190505b949350505050565b50505050565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60405180606001604052806060815260200160008152602001600081525090565b6000819050919050565b612d3381612d20565b82525050565b6000602082019050612d4e6000830184612d2a565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d9d81612d68565b8114612da857600080fd5b50565b600081359050612dba81612d94565b92915050565b600060208284031215612dd657612dd5612d5e565b5b6000612de484828501612dab565b91505092915050565b60008115159050919050565b612e0281612ded565b82525050565b6000602082019050612e1d6000830184612df9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e5d578082015181840152602081019050612e42565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e8582612e23565b612e8f8185612e2e565b9350612e9f818560208601612e3f565b612ea881612e69565b840191505092915050565b60006020820190508181036000830152612ecd8184612e7a565b905092915050565b612ede81612d20565b8114612ee957600080fd5b50565b600081359050612efb81612ed5565b92915050565b600060208284031215612f1757612f16612d5e565b5b6000612f2584828501612eec565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f5982612f2e565b9050919050565b612f6981612f4e565b82525050565b6000602082019050612f846000830184612f60565b92915050565b612f9381612f4e565b8114612f9e57600080fd5b50565b600081359050612fb081612f8a565b92915050565b60008060408385031215612fcd57612fcc612d5e565b5b6000612fdb85828601612fa1565b9250506020612fec85828601612eec565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61303882612e69565b810181811067ffffffffffffffff8211171561305757613056613000565b5b80604052505050565b600061306a612d54565b9050613076828261302f565b919050565b600067ffffffffffffffff82111561309657613095613000565b5b61309f82612e69565b9050602081019050919050565b82818337600083830152505050565b60006130ce6130c98461307b565b613060565b9050828152602081018484840111156130ea576130e9612ffb565b5b6130f58482856130ac565b509392505050565b600082601f83011261311257613111612ff6565b5b81356131228482602086016130bb565b91505092915050565b6000806000806080858703121561314557613144612d5e565b5b600085013567ffffffffffffffff81111561316357613162612d63565b5b61316f878288016130fd565b945050602085013567ffffffffffffffff8111156131905761318f612d63565b5b61319c878288016130fd565b935050604085013567ffffffffffffffff8111156131bd576131bc612d63565b5b6131c9878288016130fd565b92505060606131da87828801612eec565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061322e82612e23565b6132388185613212565b9350613248818560208601612e3f565b61325181612e69565b840191505092915050565b61326581612ded565b82525050565b61327481612d20565b82525050565b600060a08301600083015184820360008601526132978282613223565b915050602083015184820360208601526132b18282613223565b915050604083015184820360408601526132cb8282613223565b91505060608301516132e0606086018261325c565b5060808301516132f3608086018261326b565b508091505092915050565b600061330a838361327a565b905092915050565b6000602082019050919050565b600061332a826131e6565b61333481856131f1565b93508360208202850161334685613202565b8060005b85811015613382578484038952815161336385826132fe565b945061336e83613312565b925060208a0199505060018101905061334a565b50829750879550505050505092915050565b600060208201905081810360008301526133ae818461331f565b905092915050565b6000602082840312156133cc576133cb612d5e565b5b60006133da84828501612fa1565b91505092915050565b6000806000606084860312156133fc576133fb612d5e565b5b600061340a86828701612fa1565b935050602061341b86828701612fa1565b925050604061342c86828701612eec565b9150509250925092565b600060a08201905081810360008301526134508188612e7a565b905081810360208301526134648187612e7a565b905081810360408301526134788186612e7a565b90506134876060830185612df9565b6134946080830184612d2a565b9695505050505050565b6000602082840312156134b4576134b3612d5e565b5b600082013567ffffffffffffffff8111156134d2576134d1612d63565b5b6134de848285016130fd565b91505092915050565b600060608201905081810360008301526135018186612e7a565b90506135106020830185612d2a565b61351d6040830184612d2a565b949350505050565b600060608301600083015184820360008601526135428282613223565b9150506020830151613557602086018261326b565b50604083015161356a604086018261326b565b508091505092915050565b6000610100820190508181036000830152613590818b612e7a565b905081810360208301526135a4818a612e7a565b90506135b36040830189612d2a565b6135c06060830188612d2a565b6135cd6080830187612d2a565b81810360a08301526135df8186613525565b905081810360c08301526135f38185613525565b905081810360e08301526136078184613525565b90509998505050505050505050565b61361f81612ded565b811461362a57600080fd5b50565b60008135905061363c81613616565b92915050565b6000806040838503121561365957613658612d5e565b5b600061366785828601612fa1565b92505060206136788582860161362d565b9150509250929050565b600067ffffffffffffffff82111561369d5761369c613000565b5b6136a682612e69565b9050602081019050919050565b60006136c66136c184613682565b613060565b9050828152602081018484840111156136e2576136e1612ffb565b5b6136ed8482856130ac565b509392505050565b600082601f83011261370a57613709612ff6565b5b813561371a8482602086016136b3565b91505092915050565b6000806000806080858703121561373d5761373c612d5e565b5b600061374b87828801612fa1565b945050602061375c87828801612fa1565b935050604061376d87828801612eec565b925050606085013567ffffffffffffffff81111561378e5761378d612d63565b5b61379a878288016136f5565b91505092959194509250565b600080604083850312156137bd576137bc612d5e565b5b60006137cb85828601612fa1565b92505060206137dc85828601612fa1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061382082612d20565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613852576138516137e6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806138a457607f821691505b6020821081036138b7576138b661385d565b5b50919050565b600081905092915050565b60006138d382612e23565b6138dd81856138bd565b93506138ed818560208601612e3f565b80840191505092915050565b600061390582846138c8565b915081905092915050565b600061391b82612d20565b915061392683612d20565b925082820190508082111561393e5761393d6137e6565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613969565b6139b08683613969565b95508019841693508086168417925050509392505050565b6000819050919050565b60006139ed6139e86139e384612d20565b6139c8565b612d20565b9050919050565b6000819050919050565b613a07836139d2565b613a1b613a13826139f4565b848454613976565b825550505050565b600090565b613a30613a23565b613a3b8184846139fe565b505050565b5b81811015613a5f57613a54600082613a28565b600181019050613a41565b5050565b601f821115613aa457613a7581613944565b613a7e84613959565b81016020851015613a8d578190505b613aa1613a9985613959565b830182613a40565b50505b505050565b600082821c905092915050565b6000613ac760001984600802613aa9565b1980831691505092915050565b6000613ae08383613ab6565b9150826002028217905092915050565b613af982612e23565b67ffffffffffffffff811115613b1257613b11613000565b5b613b1c825461388c565b613b27828285613a63565b600060209050601f831160018114613b5a5760008415613b48578287015190505b613b528582613ad4565b865550613bba565b601f198416613b6886613944565b60005b82811015613b9057848901518255600182019150602085019450602081019050613b6b565b86831015613bad5784890151613ba9601f891682613ab6565b8355505b6001600288020188555050505b505050505050565b6000613bcd82612d20565b9150613bd883612d20565b9250828203905081811115613bf057613bef6137e6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613c5b601883612e2e565b9150613c6682613c25565b602082019050919050565b60006020820190508181036000830152613c8a81613c4e565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613ced602983612e2e565b9150613cf882613c91565b604082019050919050565b60006020820190508181036000830152613d1c81613ce0565b9050919050565b6000613d2f82856138c8565b9150613d3b82846138c8565b91508190509392505050565b7f696e76616c696420746965720000000000000000000000000000000000000000600082015250565b6000613d7d600c83612e2e565b9150613d8882613d47565b602082019050919050565b60006020820190508181036000830152613dac81613d70565b9050919050565b6000613dbe82612d20565b9150613dc983612d20565b9250828202613dd781612d20565b91508282048414831517613dee57613ded6137e6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e2f82612d20565b9150613e3a83612d20565b925082613e4a57613e49613df5565b5b828204905092915050565b7f7573657220616c72656164792073756273637269626564000000000000000000600082015250565b6000613e8b601783612e2e565b9150613e9682613e55565b602082019050919050565b60006020820190508181036000830152613eba81613e7e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613f1d602683612e2e565b9150613f2882613ec1565b604082019050919050565b60006020820190508181036000830152613f4c81613f10565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f89602083612e2e565b9150613f9482613f53565b602082019050919050565b60006020820190508181036000830152613fb881613f7c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061401b603283612e2e565b915061402682613fbf565b604082019050919050565b6000602082019050818103600083015261404a8161400e565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614087602083612e2e565b915061409282614051565b602082019050919050565b600060208201905081810360008301526140b68161407a565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006140f3601c83612e2e565b91506140fe826140bd565b602082019050919050565b60006020820190508181036000830152614122816140e6565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061415082614129565b61415a8185614134565b935061416a818560208601612e3f565b61417381612e69565b840191505092915050565b60006080820190506141936000830187612f60565b6141a06020830186612f60565b6141ad6040830185612d2a565b81810360608301526141bf8184614145565b905095945050505050565b6000815190506141d981612d94565b92915050565b6000602082840312156141f5576141f4612d5e565b5b6000614203848285016141ca565b9150509291505056fea2646970667358221220d7c6ed5c60ebd775191b630edebc89c7632d00552dbfc6ba92ba9f6641eb3e6464736f6c63430008120033a26469706673582212205f437ea06d5dada2eb2178d12535bc71400c26efa2527d5307ca143f8a7bc87a64736f6c63430008120033",
  "deployedBytecode": "0x608060405260043610620000b65760003560e01c8063aae83c82116200006d578063aae83c821462000213578063c2d8e1ad1462000243578063eb8cdd341462000287578063f193e1a51462000293578063f851a44014620002d7578063f97fac4d146200030757620000b6565b8063164e68de14620000bb57806322b6ffca14620000e957806327537498146200012d57806334af431d146200015d5780633de6053a14620001a1578063588a168214620001e5575b600080fd5b348015620000c857600080fd5b50620000e76004803603810190620000e1919062000a0b565b62000337565b005b348015620000f657600080fd5b506200011560048036038101906200010f919062000a82565b620003e7565b60405162000124919062000ad1565b60405180910390f35b3480156200013a57600080fd5b506200014562000490565b60405162000154919062000b09565b60405180910390f35b3480156200016a57600080fd5b5062000189600480360381019062000183919062000a82565b62000496565b60405162000198919062000b37565b60405180910390f35b348015620001ae57600080fd5b50620001cd6004803603810190620001c7919062000a82565b620004c9565b604051620001dc919062000b37565b60405180910390f35b348015620001f257600080fd5b506200021160048036038101906200020b919062000ce7565b62000532565b005b3480156200022057600080fd5b506200022b62000822565b6040516200023a919062000b09565b60405180910390f35b3480156200025057600080fd5b506200026f600480360381019062000269919062000e16565b62000828565b6040516200027e919062000b37565b60405180910390f35b6200029162000871565b005b348015620002a057600080fd5b50620002bf6004803603810190620002b9919062000e67565b6200088e565b604051620002ce919062000b37565b60405180910390f35b348015620002e457600080fd5b50620002ef620008ce565b604051620002fe919062000b37565b60405180910390f35b3480156200031457600080fd5b506200031f620008f4565b6040516200032e919062000f67565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200039257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6005549081150290604051600060405180830381858888f19350505050158015620003db573d6000803e3d6000fd5b50600060058190555050565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036200048657600090506200048b565b600190505b919050565b60045481565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060018660405162000546919062001004565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000648576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063f906200107e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200068257600080fd5b600088883389898989896004546040516200069d9062000984565b620006b199989796959493929190620010e1565b604051809103906000f080158015620006ce573d6000803e3d6000fd5b50905060008190506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001896040516200074c919062001004565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b60055481565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3460056000828254620008859190620011cb565b92505081905550565b600081815481106200089f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200097a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200092f575b5050505050905090565b614d4e806200120783390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620009d382620009a6565b9050919050565b620009e581620009c6565b8114620009f157600080fd5b50565b60008135905062000a0581620009da565b92915050565b60006020828403121562000a245762000a236200099c565b5b600062000a3484828501620009f4565b91505092915050565b600062000a4a82620009a6565b9050919050565b62000a5c8162000a3d565b811462000a6857600080fd5b50565b60008135905062000a7c8162000a51565b92915050565b60006020828403121562000a9b5762000a9a6200099c565b5b600062000aab8482850162000a6b565b91505092915050565b60008115159050919050565b62000acb8162000ab4565b82525050565b600060208201905062000ae8600083018462000ac0565b92915050565b6000819050919050565b62000b038162000aee565b82525050565b600060208201905062000b20600083018462000af8565b92915050565b62000b318162000a3d565b82525050565b600060208201905062000b4e600083018462000b26565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000ba98262000b5e565b810181811067ffffffffffffffff8211171562000bcb5762000bca62000b6f565b5b80604052505050565b600062000be062000992565b905062000bee828262000b9e565b919050565b600067ffffffffffffffff82111562000c115762000c1062000b6f565b5b62000c1c8262000b5e565b9050602081019050919050565b82818337600083830152505050565b600062000c4f62000c498462000bf3565b62000bd4565b90508281526020810184848401111562000c6e5762000c6d62000b59565b5b62000c7b84828562000c29565b509392505050565b600082601f83011262000c9b5762000c9a62000b54565b5b813562000cad84826020860162000c38565b91505092915050565b62000cc18162000aee565b811462000ccd57600080fd5b50565b60008135905062000ce18162000cb6565b92915050565b600080600080600080600060e0888a03121562000d095762000d086200099c565b5b600088013567ffffffffffffffff81111562000d2a5762000d29620009a1565b5b62000d388a828b0162000c83565b975050602088013567ffffffffffffffff81111562000d5c5762000d5b620009a1565b5b62000d6a8a828b0162000c83565b965050604088013567ffffffffffffffff81111562000d8e5762000d8d620009a1565b5b62000d9c8a828b0162000c83565b955050606088013567ffffffffffffffff81111562000dc05762000dbf620009a1565b5b62000dce8a828b0162000c83565b945050608062000de18a828b0162000cd0565b93505060a062000df48a828b0162000cd0565b92505060c062000e078a828b0162000cd0565b91505092959891949750929550565b60006020828403121562000e2f5762000e2e6200099c565b5b600082013567ffffffffffffffff81111562000e505762000e4f620009a1565b5b62000e5e8482850162000c83565b91505092915050565b60006020828403121562000e805762000e7f6200099c565b5b600062000e908482850162000cd0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000ed08162000a3d565b82525050565b600062000ee4838362000ec5565b60208301905092915050565b6000602082019050919050565b600062000f0a8262000e99565b62000f16818562000ea4565b935062000f238362000eb5565b8060005b8381101562000f5a57815162000f3e888262000ed6565b975062000f4b8362000ef0565b92505060018101905062000f27565b5085935050505092915050565b6000602082019050818103600083015262000f83818462000efd565b905092915050565b600081519050919050565b600081905092915050565b60005b8381101562000fc157808201518184015260208101905062000fa4565b60008484015250505050565b600062000fda8262000f8b565b62000fe6818562000f96565b935062000ff881856020860162000fa1565b80840191505092915050565b600062001012828462000fcd565b915081905092915050565b600082825260208201905092915050565b7f6164647265737320616c72656164792068617320616e206163636f756e740000600082015250565b600062001066601e836200101d565b915062001073826200102e565b602082019050919050565b60006020820190508181036000830152620010998162001057565b9050919050565b6000620010ad8262000f8b565b620010b981856200101d565b9350620010cb81856020860162000fa1565b620010d68162000b5e565b840191505092915050565b6000610120820190508181036000830152620010fe818c620010a0565b9050818103602083015262001114818b620010a0565b905062001125604083018a62000b26565b8181036060830152620011398189620010a0565b905081810360808301526200114f8188620010a0565b90506200116060a083018762000af8565b6200116f60c083018662000af8565b6200117e60e083018562000af8565b6200118e61010083018462000af8565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620011d88262000aee565b9150620011e58362000aee565b92508282019050808211156200120057620011ff6200119c565b5b9291505056fe608060405262278d006013553480156200001857600080fd5b5060405162004d4e38038062004d4e83398181016040528101906200003e9190620005ff565b888881600090816200005191906200099b565b5080600190816200006391906200099b565b505050620000866200007a620002fe60201b60201c565b6200030660201b60201c565b33600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000d8876200030660201b60201c565b8560089081620000e991906200099b565b508460099081620000fb91906200099b565b508060108190555060405180606001604052806040518060400160405280600681526020017f62726f6e7a6500000000000000000000000000000000000000000000000000008152508152602001620f4240866200015a919062000ab1565b81526020016000815250601260006001815260200190815260200160002060008201518160000190816200018f91906200099b565b50602082015181600101556040820151816002015590505060405180606001604052806040518060400160405280600681526020017f73696c76657200000000000000000000000000000000000000000000000000008152508152602001620f424085620001fe919062000ab1565b81526020016000815250601260006002815260200190815260200160002060008201518160000190816200023391906200099b565b50602082015181600101556040820151816002015590505060405180606001604052806040518060400160405280600481526020017f676f6c64000000000000000000000000000000000000000000000000000000008152508152602001620f424084620002a2919062000ab1565b8152602001600081525060126000600381526020019081526020016000206000820151816000019081620002d791906200099b565b50602082015181600101556040820151816002015590505050505050505050505062000afc565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200043582620003ea565b810181811067ffffffffffffffff82111715620004575762000456620003fb565b5b80604052505050565b60006200046c620003cc565b90506200047a82826200042a565b919050565b600067ffffffffffffffff8211156200049d576200049c620003fb565b5b620004a882620003ea565b9050602081019050919050565b60005b83811015620004d5578082015181840152602081019050620004b8565b60008484015250505050565b6000620004f8620004f2846200047f565b62000460565b905082815260208101848484011115620005175762000516620003e5565b5b62000524848285620004b5565b509392505050565b600082601f830112620005445762000543620003e0565b5b815162000556848260208601620004e1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200058c826200055f565b9050919050565b6200059e816200057f565b8114620005aa57600080fd5b50565b600081519050620005be8162000593565b92915050565b6000819050919050565b620005d981620005c4565b8114620005e557600080fd5b50565b600081519050620005f981620005ce565b92915050565b60008060008060008060008060006101208a8c031215620006255762000624620003d6565b5b60008a015167ffffffffffffffff811115620006465762000645620003db565b5b620006548c828d016200052c565b99505060208a015167ffffffffffffffff811115620006785762000677620003db565b5b620006868c828d016200052c565b9850506040620006998c828d01620005ad565b97505060608a015167ffffffffffffffff811115620006bd57620006bc620003db565b5b620006cb8c828d016200052c565b96505060808a015167ffffffffffffffff811115620006ef57620006ee620003db565b5b620006fd8c828d016200052c565b95505060a0620007108c828d01620005e8565b94505060c0620007238c828d01620005e8565b93505060e0620007368c828d01620005e8565b9250506101006200074a8c828d01620005e8565b9150509295985092959850929598565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007ad57607f821691505b602082108103620007c357620007c262000765565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200082d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007ee565b620008398683620007ee565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200087c620008766200087084620005c4565b62000851565b620005c4565b9050919050565b6000819050919050565b62000898836200085b565b620008b0620008a78262000883565b848454620007fb565b825550505050565b600090565b620008c7620008b8565b620008d48184846200088d565b505050565b5b81811015620008fc57620008f0600082620008bd565b600181019050620008da565b5050565b601f8211156200094b576200091581620007c9565b6200092084620007de565b8101602085101562000930578190505b620009486200093f85620007de565b830182620008d9565b50505b505050565b600082821c905092915050565b6000620009706000198460080262000950565b1980831691505092915050565b60006200098b83836200095d565b9150826002028217905092915050565b620009a6826200075a565b67ffffffffffffffff811115620009c257620009c1620003fb565b5b620009ce825462000794565b620009db82828562000900565b600060209050601f83116001811462000a135760008415620009fe578287015190505b62000a0a85826200097d565b86555062000a7a565b601f19841662000a2386620007c9565b60005b8281101562000a4d5784890151825560018201915060208501945060208101905062000a26565b8683101562000a6d578489015162000a69601f8916826200095d565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000abe82620005c4565b915062000acb83620005c4565b925082820262000adb81620005c4565b9150828204841483151762000af55762000af462000a82565b5b5092915050565b6142428062000b0c6000396000f3fe6080604052600436106102455760003560e01c80637a94a63311610139578063b88d4fde116100b6578063c87b56dd1161007a578063c87b56dd146108a0578063de4529eb146108dd578063e0ded7761461091a578063e985e9c514610936578063ed88c68e14610973578063f2fde38b1461097d57610245565b8063b88d4fde146107a7578063b92ae87c146107d0578063bcb2226a1461080d578063c5da76041461084a578063c707944b1461087557610245565b80638da5cb5b116100fd5780638da5cb5b146106d257806395d89b41146106fd578063a22cb46514610728578063a3e3981114610751578063b1d140681461077c57610245565b80637a94a633146105e25780637efab5f31461060d5780638356c1e11461064c578063863678e91461067e578063893d20e8146106a757610245565b806327537498116101c7578063534844a21161018b578063534844a2146104fd5780636352211e1461051457806370a0823114610551578063715018a61461058e5780637235d7d9146105a557610245565b8063275374981461041457806327e25dcc1461043f5780632ae25fd2146104805780632dc282e9146104a957806342842e0e146104d457610245565b8063095ea7b31161020e578063095ea7b31461033157806309c2e0d21461035a5780631dbe69d41461038357806321c7557c146103ae57806323b872dd146103eb57610245565b8062b370441461024a57806301ffc9a71461027557806302d17a15146102b257806306fdde03146102c9578063081812fc146102f4575b600080fd5b34801561025657600080fd5b5061025f6109a6565b60405161026c9190612d39565b60405180910390f35b34801561028157600080fd5b5061029c60048036038101906102979190612dc0565b6109ac565b6040516102a99190612e08565b60405180910390f35b3480156102be57600080fd5b506102c7610a8e565b005b3480156102d557600080fd5b506102de610b65565b6040516102eb9190612eb3565b60405180910390f35b34801561030057600080fd5b5061031b60048036038101906103169190612f01565b610bf7565b6040516103289190612f6f565b60405180910390f35b34801561033d57600080fd5b5061035860048036038101906103539190612fb6565b610c3d565b005b34801561036657600080fd5b50610381600480360381019061037c919061312b565b610c4c565b005b34801561038f57600080fd5b50610398610d8f565b6040516103a59190613394565b60405180910390f35b3480156103ba57600080fd5b506103d560048036038101906103d091906133b6565b610fc9565b6040516103e29190612d39565b60405180910390f35b3480156103f757600080fd5b50610412600480360381019061040d91906133e3565b610fe1565b005b34801561042057600080fd5b50610429610ff1565b6040516104369190612d39565b60405180910390f35b34801561044b57600080fd5b5061046660048036038101906104619190612f01565b610ff7565b604051610477959493929190613436565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a2919061349e565b6111e2565b005b3480156104b557600080fd5b506104be611270565b6040516104cb9190612d39565b60405180910390f35b3480156104e057600080fd5b506104fb60048036038101906104f691906133e3565b611276565b005b34801561050957600080fd5b50610512611286565b005b34801561052057600080fd5b5061053b60048036038101906105369190612f01565b6112f6565b6040516105489190612f6f565b60405180910390f35b34801561055d57600080fd5b50610578600480360381019061057391906133b6565b61137c565b6040516105859190612d39565b60405180910390f35b34801561059a57600080fd5b506105a3611433565b005b3480156105b157600080fd5b506105cc60048036038101906105c7919061349e565b611447565b6040516105d99190612d39565b60405180910390f35b3480156105ee57600080fd5b506105f7611475565b6040516106049190612d39565b60405180910390f35b34801561061957600080fd5b50610634600480360381019061062f9190612f01565b61147b565b604051610643939291906134e7565b60405180910390f35b34801561065857600080fd5b5061066161152d565b604051610675989796959493929190613575565b60405180910390f35b34801561068a57600080fd5b506106a560048036038101906106a0919061349e565b6118e4565b005b3480156106b357600080fd5b506106bc611972565b6040516106c99190612f6f565b60405180910390f35b3480156106de57600080fd5b506106e7611986565b6040516106f49190612f6f565b60405180910390f35b34801561070957600080fd5b506107126119b0565b60405161071f9190612eb3565b60405180910390f35b34801561073457600080fd5b5061074f600480360381019061074a9190613642565b611a42565b005b34801561075d57600080fd5b50610766611a51565b6040516107739190612eb3565b60405180910390f35b34801561078857600080fd5b50610791611adf565b60405161079e9190612d39565b60405180910390f35b3480156107b357600080fd5b506107ce60048036038101906107c99190613723565b611ae5565b005b3480156107dc57600080fd5b506107f760048036038101906107f291906133b6565b611af6565b6040516108049190612e08565b60405180910390f35b34801561081957600080fd5b50610834600480360381019061082f91906133b6565b611b4c565b6040516108419190612d39565b60405180910390f35b34801561085657600080fd5b5061085f611b64565b60405161086c9190612eb3565b60405180910390f35b34801561088157600080fd5b5061088a611bf2565b6040516108979190612d39565b60405180910390f35b3480156108ac57600080fd5b506108c760048036038101906108c29190612f01565b611bf8565b6040516108d49190612eb3565b60405180910390f35b3480156108e957600080fd5b5061090460048036038101906108ff91906133b6565b611c60565b6040516109119190612d39565b60405180910390f35b610934600480360381019061092f9190612f01565b611c78565b005b34801561094257600080fd5b5061095d600480360381019061095891906137a6565b6121fe565b60405161096a9190612e08565b60405180910390f35b61097b612292565b005b34801561098957600080fd5b506109a4600480360381019061099f91906133b6565b612379565b005b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a7757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a875750610a86826123fc565b5b9050919050565b6000600a54905060005b81811015610b61576000610aab826112f6565b905042601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b4d576000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b508080610b5990613815565b915050610a98565b5050565b606060008054610b749061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba09061388c565b8015610bed5780601f10610bc257610100808354040283529160200191610bed565b820191906000526020600020905b815481529060010190602001808311610bd057829003601f168201915b5050505050905090565b6000610c0282612466565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c4857600080fd5b5050565b610c546124b1565b6000600d84604051610c6691906138f9565b90815260200160405180910390205414610c7f57600080fd5b6001600b6000828254610c929190613910565b92505081905550600b54600d84604051610cac91906138f9565b908152602001604051809103902081905550600c6040518060a001604052808681526020018581526020018481526020016000151581526020018381525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000019081610d289190613af0565b506020820151816001019081610d3e9190613af0565b506040820151816002019081610d549190613af0565b5060608201518160030160006101000a81548160ff021916908315150217905550608082015181600401555050610d89610a8e565b50505050565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610fc057838290600052602060002090600502016040518060a0016040529081600082018054610de69061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e129061388c565b8015610e5f5780601f10610e3457610100808354040283529160200191610e5f565b820191906000526020600020905b815481529060010190602001808311610e4257829003601f168201915b50505050508152602001600182018054610e789061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea49061388c565b8015610ef15780601f10610ec657610100808354040283529160200191610ef1565b820191906000526020600020905b815481529060010190602001808311610ed457829003601f168201915b50505050508152602001600282018054610f0a9061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f369061388c565b8015610f835780601f10610f5857610100808354040283529160200191610f83565b820191906000526020600020905b815481529060010190602001808311610f6657829003601f168201915b505050505081526020016003820160009054906101000a900460ff1615151515815260200160048201548152505081526020019060010190610db3565b50505050905090565b60116020528060005260406000206000915090505481565b6000610fec57600080fd5b505050565b60105481565b600c818154811061100757600080fd5b906000526020600020906005020160009150905080600001805461102a9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546110569061388c565b80156110a35780601f10611078576101008083540402835291602001916110a3565b820191906000526020600020905b81548152906001019060200180831161108657829003601f168201915b5050505050908060010180546110b89061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546110e49061388c565b80156111315780601f1061110657610100808354040283529160200191611131565b820191906000526020600020905b81548152906001019060200180831161111457829003601f168201915b5050505050908060020180546111469061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546111729061388c565b80156111bf5780601f10611194576101008083540402835291602001916111bf565b820191906000526020600020905b8154815290600101906020018083116111a257829003601f168201915b5050505050908060030160009054906101000a900460ff16908060040154905085565b6111ea6124b1565b6000600d826040516111fc91906138f9565b90815260200160405180910390205490506000811161121a57600080fd5b6000600c60018361122b9190613bc2565b8154811061123c5761123b613bf6565b5b906000526020600020906005020160030160006101000a81548160ff02191690831515021790555061126c610a8e565b5050565b600b5481565b600061128157600080fd5b505050565b61128e6124b1565b6000611298611986565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f193505050501580156112e2573d6000803e3d6000fd5b506000600e819055506112f3610a8e565b50565b6000806113028361252f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136a90613c71565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390613d03565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61143b6124b1565b611445600061256c565b565b600d818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60135481565b601260205280600052604060002060009150905080600001805461149e9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546114ca9061388c565b80156115175780601f106114ec57610100808354040283529160200191611517565b820191906000526020600020905b8154815290600101906020018083116114fa57829003601f168201915b5050505050908060010154908060020154905083565b606080600080600061153d612cff565b611545612cff565b61154d612cff565b60086009600a54600b54600e546012600060018152602001908152602001600020601260006002815260200190815260200160002060126000600381526020019081526020016000208780546115a29061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546115ce9061388c565b801561161b5780601f106115f05761010080835404028352916020019161161b565b820191906000526020600020905b8154815290600101906020018083116115fe57829003601f168201915b5050505050975086805461162e9061388c565b80601f016020809104026020016040519081016040528092919081815260200182805461165a9061388c565b80156116a75780601f1061167c576101008083540402835291602001916116a7565b820191906000526020600020905b81548152906001019060200180831161168a57829003601f168201915b50505050509650826040518060600160405290816000820180546116ca9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546116f69061388c565b80156117435780601f1061171857610100808354040283529160200191611743565b820191906000526020600020905b81548152906001019060200180831161172657829003601f168201915b505050505081526020016001820154815260200160028201548152505092508160405180606001604052908160008201805461177e9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546117aa9061388c565b80156117f75780601f106117cc576101008083540402835291602001916117f7565b820191906000526020600020905b8154815290600101906020018083116117da57829003601f168201915b50505050508152602001600182015481526020016002820154815250509150806040518060600160405290816000820180546118329061388c565b80601f016020809104026020016040519081016040528092919081815260200182805461185e9061388c565b80156118ab5780601f10611880576101008083540402835291602001916118ab565b820191906000526020600020905b81548152906001019060200180831161188e57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050975097509750975097509750975097509091929394959697565b6118ec6124b1565b6000600d826040516118fe91906138f9565b90815260200160405180910390205490506000811161191c57600080fd5b6001600c60018361192d9190613bc2565b8154811061193e5761193d613bf6565b5b906000526020600020906005020160030160006101000a81548160ff02191690831515021790555061196e610a8e565b5050565b60008061197d611986565b90508091505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546119bf9061388c565b80601f01602080910402602001604051908101604052809291908181526020018280546119eb9061388c565b8015611a385780601f10611a0d57610100808354040283529160200191611a38565b820191906000526020600020905b815481529060010190602001808311611a1b57829003601f168201915b5050505050905090565b6000611a4d57600080fd5b5050565b60098054611a5e9061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8a9061388c565b8015611ad75780601f10611aac57610100808354040283529160200191611ad7565b820191906000526020600020905b815481529060010190602001808311611aba57829003601f168201915b505050505081565b600e5481565b6000611af057600080fd5b50505050565b6000601660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60146020528060005260406000206000915090505481565b60088054611b719061388c565b80601f0160208091040260200160405190810160405280929190818152602001828054611b9d9061388c565b8015611bea5780601f10611bbf57610100808354040283529160200191611bea565b820191906000526020600020905b815481529060010190602001808311611bcd57829003601f168201915b505050505081565b600a5481565b6060611c0382612466565b6000611c0d612632565b90506000815111611c2d5760405180602001604052806000815250611c58565b80611c3784612649565b604051602001611c48929190613d23565b6040516020818303038152906040525b915050919050565b60156020528060005260406000206000915090505481565b6001811015611cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb390613d93565b60405180910390fd5b6003811115611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf790613d93565b60405180910390fd5b60126000828152602001908152602001600020600101543411611d2257600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000606434601054611d5b9190613db3565b611d659190613e24565b90506000611d723361137c565b03611f81576001600a54611d869190613910565b600a81905550611d9833600a54612717565b8173ffffffffffffffffffffffffffffffffffffffff1663eb8cdd34826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611de057600080fd5b505af1158015611df4573d6000803e3d6000fd5b50505050508034611e059190613bc2565b600e6000828254611e169190613910565b925050819055506001601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060135442611e839190613910565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001601260008581526020019081526020016000206002016000828254611f759190613910565b925050819055506121f9565b60001515601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612014576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161200b90613ea1565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663eb8cdd34826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561205c57600080fd5b505af1158015612070573d6000803e3d6000fd5b505050505080346120819190613bc2565b600e60008282546120929190613910565b925050819055506001601660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601354426120ff9190613910565b601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555042601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016012600085815260200190815260200160002060020160008282546121f19190613910565b925050819055505b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064346010546122cb9190613db3565b6122d59190613e24565b90508173ffffffffffffffffffffffffffffffffffffffff1663eb8cdd34826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561231f57600080fd5b505af1158015612333573d6000803e3d6000fd5b505050505080346123449190613bc2565b600e60008282546123559190613910565b9250508190555034600f600082825461236e9190613910565b925050819055505050565b6123816124b1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e790613f33565b60405180910390fd5b6123f98161256c565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61246f81612735565b6124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590613c71565b60405180910390fd5b50565b6124b9612776565b73ffffffffffffffffffffffffffffffffffffffff166124d7611986565b73ffffffffffffffffffffffffffffffffffffffff161461252d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252490613f9f565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060405180602001604052806000815250905090565b6060600060016126588461277e565b01905060008167ffffffffffffffff81111561267757612676613000565b5b6040519080825280601f01601f1916602001820160405280156126a95781602001600182028036833780820191505090505b509050600082602001820190505b60011561270c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612700576126ff613df5565b5b049450600085036126b7575b819350505050919050565b6127318282604051806020016040528060008152506128d1565b5050565b60008073ffffffffffffffffffffffffffffffffffffffff166127578361252f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106127dc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816127d2576127d1613df5565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612819576d04ee2d6d415b85acef8100000000838161280f5761280e613df5565b5b0492506020810190505b662386f26fc10000831061284857662386f26fc10000838161283e5761283d613df5565b5b0492506010810190505b6305f5e1008310612871576305f5e100838161286757612866613df5565b5b0492506008810190505b612710831061289657612710838161288c5761288b613df5565b5b0492506004810190505b606483106128b957606483816128af576128ae613df5565b5b0492506002810190505b600a83106128c8576001810190505b80915050919050565b6128db838361292c565b6128e86000848484612b49565b612927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161291e90614031565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361299b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129929061409d565b60405180910390fd5b6129a481612735565b156129e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129db90614109565b60405180910390fd5b6129f2600083836001612cd0565b6129fb81612735565b15612a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3290614109565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612b45600083836001612cd6565b5050565b6000612b6a8473ffffffffffffffffffffffffffffffffffffffff16612cdc565b15612cc3578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b93612776565b8786866040518563ffffffff1660e01b8152600401612bb5949392919061417e565b6020604051808303816000875af1925050508015612bf157506040513d601f19601f82011682018060405250810190612bee91906141df565b60015b612c73573d8060008114612c21576040519150601f19603f3d011682016040523d82523d6000602084013e612c26565b606091505b506000815103612c6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6290614031565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612cc8565b600190505b949350505050565b50505050565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60405180606001604052806060815260200160008152602001600081525090565b6000819050919050565b612d3381612d20565b82525050565b6000602082019050612d4e6000830184612d2a565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d9d81612d68565b8114612da857600080fd5b50565b600081359050612dba81612d94565b92915050565b600060208284031215612dd657612dd5612d5e565b5b6000612de484828501612dab565b91505092915050565b60008115159050919050565b612e0281612ded565b82525050565b6000602082019050612e1d6000830184612df9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e5d578082015181840152602081019050612e42565b60008484015250505050565b6000601f19601f8301169050919050565b6000612e8582612e23565b612e8f8185612e2e565b9350612e9f818560208601612e3f565b612ea881612e69565b840191505092915050565b60006020820190508181036000830152612ecd8184612e7a565b905092915050565b612ede81612d20565b8114612ee957600080fd5b50565b600081359050612efb81612ed5565b92915050565b600060208284031215612f1757612f16612d5e565b5b6000612f2584828501612eec565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f5982612f2e565b9050919050565b612f6981612f4e565b82525050565b6000602082019050612f846000830184612f60565b92915050565b612f9381612f4e565b8114612f9e57600080fd5b50565b600081359050612fb081612f8a565b92915050565b60008060408385031215612fcd57612fcc612d5e565b5b6000612fdb85828601612fa1565b9250506020612fec85828601612eec565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61303882612e69565b810181811067ffffffffffffffff8211171561305757613056613000565b5b80604052505050565b600061306a612d54565b9050613076828261302f565b919050565b600067ffffffffffffffff82111561309657613095613000565b5b61309f82612e69565b9050602081019050919050565b82818337600083830152505050565b60006130ce6130c98461307b565b613060565b9050828152602081018484840111156130ea576130e9612ffb565b5b6130f58482856130ac565b509392505050565b600082601f83011261311257613111612ff6565b5b81356131228482602086016130bb565b91505092915050565b6000806000806080858703121561314557613144612d5e565b5b600085013567ffffffffffffffff81111561316357613162612d63565b5b61316f878288016130fd565b945050602085013567ffffffffffffffff8111156131905761318f612d63565b5b61319c878288016130fd565b935050604085013567ffffffffffffffff8111156131bd576131bc612d63565b5b6131c9878288016130fd565b92505060606131da87828801612eec565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061322e82612e23565b6132388185613212565b9350613248818560208601612e3f565b61325181612e69565b840191505092915050565b61326581612ded565b82525050565b61327481612d20565b82525050565b600060a08301600083015184820360008601526132978282613223565b915050602083015184820360208601526132b18282613223565b915050604083015184820360408601526132cb8282613223565b91505060608301516132e0606086018261325c565b5060808301516132f3608086018261326b565b508091505092915050565b600061330a838361327a565b905092915050565b6000602082019050919050565b600061332a826131e6565b61333481856131f1565b93508360208202850161334685613202565b8060005b85811015613382578484038952815161336385826132fe565b945061336e83613312565b925060208a0199505060018101905061334a565b50829750879550505050505092915050565b600060208201905081810360008301526133ae818461331f565b905092915050565b6000602082840312156133cc576133cb612d5e565b5b60006133da84828501612fa1565b91505092915050565b6000806000606084860312156133fc576133fb612d5e565b5b600061340a86828701612fa1565b935050602061341b86828701612fa1565b925050604061342c86828701612eec565b9150509250925092565b600060a08201905081810360008301526134508188612e7a565b905081810360208301526134648187612e7a565b905081810360408301526134788186612e7a565b90506134876060830185612df9565b6134946080830184612d2a565b9695505050505050565b6000602082840312156134b4576134b3612d5e565b5b600082013567ffffffffffffffff8111156134d2576134d1612d63565b5b6134de848285016130fd565b91505092915050565b600060608201905081810360008301526135018186612e7a565b90506135106020830185612d2a565b61351d6040830184612d2a565b949350505050565b600060608301600083015184820360008601526135428282613223565b9150506020830151613557602086018261326b565b50604083015161356a604086018261326b565b508091505092915050565b6000610100820190508181036000830152613590818b612e7a565b905081810360208301526135a4818a612e7a565b90506135b36040830189612d2a565b6135c06060830188612d2a565b6135cd6080830187612d2a565b81810360a08301526135df8186613525565b905081810360c08301526135f38185613525565b905081810360e08301526136078184613525565b90509998505050505050505050565b61361f81612ded565b811461362a57600080fd5b50565b60008135905061363c81613616565b92915050565b6000806040838503121561365957613658612d5e565b5b600061366785828601612fa1565b92505060206136788582860161362d565b9150509250929050565b600067ffffffffffffffff82111561369d5761369c613000565b5b6136a682612e69565b9050602081019050919050565b60006136c66136c184613682565b613060565b9050828152602081018484840111156136e2576136e1612ffb565b5b6136ed8482856130ac565b509392505050565b600082601f83011261370a57613709612ff6565b5b813561371a8482602086016136b3565b91505092915050565b6000806000806080858703121561373d5761373c612d5e565b5b600061374b87828801612fa1565b945050602061375c87828801612fa1565b935050604061376d87828801612eec565b925050606085013567ffffffffffffffff81111561378e5761378d612d63565b5b61379a878288016136f5565b91505092959194509250565b600080604083850312156137bd576137bc612d5e565b5b60006137cb85828601612fa1565b92505060206137dc85828601612fa1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061382082612d20565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613852576138516137e6565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806138a457607f821691505b6020821081036138b7576138b661385d565b5b50919050565b600081905092915050565b60006138d382612e23565b6138dd81856138bd565b93506138ed818560208601612e3f565b80840191505092915050565b600061390582846138c8565b915081905092915050565b600061391b82612d20565b915061392683612d20565b925082820190508082111561393e5761393d6137e6565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026139a67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613969565b6139b08683613969565b95508019841693508086168417925050509392505050565b6000819050919050565b60006139ed6139e86139e384612d20565b6139c8565b612d20565b9050919050565b6000819050919050565b613a07836139d2565b613a1b613a13826139f4565b848454613976565b825550505050565b600090565b613a30613a23565b613a3b8184846139fe565b505050565b5b81811015613a5f57613a54600082613a28565b600181019050613a41565b5050565b601f821115613aa457613a7581613944565b613a7e84613959565b81016020851015613a8d578190505b613aa1613a9985613959565b830182613a40565b50505b505050565b600082821c905092915050565b6000613ac760001984600802613aa9565b1980831691505092915050565b6000613ae08383613ab6565b9150826002028217905092915050565b613af982612e23565b67ffffffffffffffff811115613b1257613b11613000565b5b613b1c825461388c565b613b27828285613a63565b600060209050601f831160018114613b5a5760008415613b48578287015190505b613b528582613ad4565b865550613bba565b601f198416613b6886613944565b60005b82811015613b9057848901518255600182019150602085019450602081019050613b6b565b86831015613bad5784890151613ba9601f891682613ab6565b8355505b6001600288020188555050505b505050505050565b6000613bcd82612d20565b9150613bd883612d20565b9250828203905081811115613bf057613bef6137e6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613c5b601883612e2e565b9150613c6682613c25565b602082019050919050565b60006020820190508181036000830152613c8a81613c4e565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613ced602983612e2e565b9150613cf882613c91565b604082019050919050565b60006020820190508181036000830152613d1c81613ce0565b9050919050565b6000613d2f82856138c8565b9150613d3b82846138c8565b91508190509392505050565b7f696e76616c696420746965720000000000000000000000000000000000000000600082015250565b6000613d7d600c83612e2e565b9150613d8882613d47565b602082019050919050565b60006020820190508181036000830152613dac81613d70565b9050919050565b6000613dbe82612d20565b9150613dc983612d20565b9250828202613dd781612d20565b91508282048414831517613dee57613ded6137e6565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e2f82612d20565b9150613e3a83612d20565b925082613e4a57613e49613df5565b5b828204905092915050565b7f7573657220616c72656164792073756273637269626564000000000000000000600082015250565b6000613e8b601783612e2e565b9150613e9682613e55565b602082019050919050565b60006020820190508181036000830152613eba81613e7e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613f1d602683612e2e565b9150613f2882613ec1565b604082019050919050565b60006020820190508181036000830152613f4c81613f10565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f89602083612e2e565b9150613f9482613f53565b602082019050919050565b60006020820190508181036000830152613fb881613f7c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061401b603283612e2e565b915061402682613fbf565b604082019050919050565b6000602082019050818103600083015261404a8161400e565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614087602083612e2e565b915061409282614051565b602082019050919050565b600060208201905081810360008301526140b68161407a565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006140f3601c83612e2e565b91506140fe826140bd565b602082019050919050565b60006020820190508181036000830152614122816140e6565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061415082614129565b61415a8185614134565b935061416a818560208601612e3f565b61417381612e69565b840191505092915050565b60006080820190506141936000830187612f60565b6141a06020830186612f60565b6141ad6040830185612d2a565b81810360608301526141bf8184614145565b905095945050505050565b6000815190506141d981612d94565b92915050565b6000602082840312156141f5576141f4612d5e565b5b6000614203848285016141ca565b9150509291505056fea2646970667358221220d7c6ed5c60ebd775191b630edebc89c7632d00552dbfc6ba92ba9f6641eb3e6464736f6c63430008120033a26469706673582212205f437ea06d5dada2eb2178d12535bc71400c26efa2527d5307ca143f8a7bc87a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2636,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "createdProfiles",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2640,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "userProfile",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2644,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "creatorContract",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2646,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2648,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "suscriptionFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2650,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "amountRecaudedFees",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}