{
  "address": "0xcD9261DEF319d0F95D5C9AAEbFC7a3134E84E2A9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionAmount",
          "type": "uint256"
        }
      ],
      "name": "createProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createdProfiles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCreators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getCreator",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "isCreator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userProfile",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "working",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3fc6c1a59797e811a0a747e770ff5cb76be5f5ef58f1d66a4c7cd6c355ec47b",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xDc11dE6060e0f6011B6c07bB2C0278d7cB5B57EE",
    "contractAddress": "0xcD9261DEF319d0F95D5C9AAEbFC7a3134E84E2A9",
    "transactionIndex": 1,
    "gasUsed": "5510925",
    "logsBloom": "0x
    "blockHash": "0xe022ca9859bc858805efb01fc0939d1bf8a8478864d5ab25c4d683fcceb899aa",
    "transactionHash": "0xe3fc6c1a59797e811a0a747e770ff5cb76be5f5ef58f1d66a4c7cd6c355ec47b",
    "logs": [],
    "blockNumber": 20907198,
    "cumulativeGasUsed": "5510925",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "979ee0ce50fd17d63d8ce9361d97d633",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionAmount\",\"type\":\"uint256\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdProfiles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCreators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"isCreator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"working\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UserFactory.sol\":\"UserFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/UserFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./UserProfile.sol\\\";\\r\\n\\r\\ncontract UserFactory {\\r\\n\\r\\n    address[] public createdProfiles;\\r\\n    //string name to address mapping\\r\\n    mapping(string=>address) public userProfile;\\r\\n    //creator address to ERC721 contract address mapping\\r\\n    mapping(address=>address) public creatorContract;\\r\\n    address public admin;\\r\\n\\r\\n    constructor(){\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    function createProfile(string memory _name,string memory _description,uint _subscriptionAmount) public\\r\\n    {\\r\\n        //check username is not taken\\r\\n        address profileAddress = userProfile[_name];\\r\\n        require(profileAddress == address(0),\\\"Username already taken\\\");\\r\\n        //check if the creator already has an ERC721\\r\\n        require(creatorContract[msg.sender] == address(0),\\\"address already has an account\\\");\\r\\n\\r\\n        UserProfile newUser = new UserProfile(_name,\\\"PATREON\\\",msg.sender,_name,_description,_subscriptionAmount);\\r\\n        address addr = address(newUser);\\r\\n        //add the created profile to store data variables\\r\\n        createdProfiles.push(addr);\\r\\n        userProfile[_name] = addr;\\r\\n        creatorContract[msg.sender] = addr;\\r\\n    }\\r\\n\\r\\n    function working() public pure returns(string memory){\\r\\n        return \\\"yes smart contract deployed\\\";\\r\\n    }\\r\\n    function getAllCreators() public view returns(address[] memory){\\r\\n        return createdProfiles;\\r\\n    }\\r\\n    function isCreator(address _creator) public view returns(bool){\\r\\n        if(creatorContract[_creator] == address(0))\\r\\n            return false;\\r\\n        return true;\\r\\n    }\\r\\n    function getCreator(address _creator) public view returns(string memory,string memory,uint){\\r\\n        return UserProfile(_creator).getCreatorInfo();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3813dd43d3f4fa90948d6e6d9610ba878824cee3f044c998d3a4172f84a7d8de\",\"license\":\"MIT\"},\"contracts/UserProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract UserProfile is ERC721, Ownable {\\r\\n\\r\\n    struct VideoData {\\r\\n        string name;\\r\\n        string videoURL;\\r\\n        string description;\\r\\n        bool hidden;\\r\\n        // string previewVideoImage; //??maybe\\r\\n    }\\r\\n\\r\\n    //USER PROFILE LOGIC\\r\\n    string public profileName;\\r\\n    string public profileDescription;\\r\\n\\r\\n\\r\\n    //BUISNESS LOGIC\\r\\n    uint public tokenIdNumber;//amount tokens released\\r\\n    uint public amountPublishedVideos;\\r\\n    uint public subscribeAmount; //required $ have to pay for subscribe, in drop(wei of tfuel)\\r\\n    VideoData[] public publishedVideos;\\r\\n    mapping(string=>uint) public videosIndex;\\r\\n    uint public amountCreator; //amount creator have to withdraw\\r\\n    uint public totalDonated; //total amount donated, analytics, this variable have not use yet\\r\\n    //PREVENT MULTIPLE SUBSCRIPTIONS FROM SAME USER\\r\\n    mapping(address=>bool) userSubscribed;\\r\\n\\r\\n    constructor(string memory _tokenName,string memory _tokenSymbol,address _sender,string memory _name,string memory _description,uint _subscribeAmount) ERC721(_tokenName,_tokenSymbol) \\r\\n    {\\r\\n        _transferOwnership(_sender);\\r\\n        profileName = _name;\\r\\n        profileDescription = _description;\\r\\n        subscribeAmount = _subscribeAmount * 1000000;//convert tfuel to drop\\r\\n    }\\r\\n\\r\\n\\r\\n    function userSubscribe() public payable {\\r\\n        require(userSubscribed[msg.sender] == false);\\r\\n        require(msg.value > subscribeAmount);\\r\\n        tokenIdNumber = tokenIdNumber + 1;\\r\\n        _safeMint(msg.sender, tokenIdNumber);  \\r\\n        amountCreator += msg.value;\\r\\n        userSubscribed[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function donate()public payable{\\r\\n\\r\\n        amountCreator += msg.value;\\r\\n        totalDonated += msg.value;\\r\\n\\r\\n    }\\r\\n\\r\\n    // restricted to owner\\r\\n    function addVideo(string memory _name, string memory _videoURL, string memory _description) public onlyOwner{\\r\\n        //prevent user reupload videos\\r\\n        require(videosIndex[_videoURL] == 0);\\r\\n        //index the video\\r\\n        amountPublishedVideos += 1;\\r\\n        videosIndex[_videoURL] = amountPublishedVideos;\\r\\n        //add video data\\r\\n        publishedVideos.push(VideoData(_name,_videoURL,_description,false));\\r\\n        \\r\\n    }\\r\\n\\r\\n    // restricted to owner //withdraws subscriptions and donations amount\\r\\n    function withdrawAmount() public onlyOwner{\\r\\n        address owner = owner();\\r\\n\\r\\n        payable(owner).transfer(amountCreator);\\r\\n        amountCreator = 0;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getVideosData() public view returns( VideoData[] memory){\\r\\n        //IMPLEMENT QUERY BY INDEX\\r\\n\\r\\n        return publishedVideos;\\r\\n    }\\r\\n\\r\\n    function hideVideo(string memory _videoUrl) public onlyOwner{\\r\\n        //get video index\\r\\n        uint _videoIndex = videosIndex[_videoUrl];\\r\\n        //require video exists\\r\\n        require(_videoIndex > 0);\\r\\n        //mark video as hide\\r\\n        publishedVideos[_videoIndex - 1].hidden = true; //[_videoIndex - 1] because index count start at 1 for prevent bugs\\r\\n        \\r\\n    }\\r\\n\\r\\n    function showVideo(string memory _videoUrl) public onlyOwner{\\r\\n        //get video index\\r\\n        uint _videoIndex = videosIndex[_videoUrl];\\r\\n        //require video exists\\r\\n        require(_videoIndex > 0);\\r\\n        //mark video as hide\\r\\n        publishedVideos[_videoIndex - 1].hidden = false; //[_videoIndex - 1] because index count start at 1 for prevent bugs\\r\\n    }\\r\\n\\r\\n    function getProfileData() external view returns(string memory,string memory,uint,uint,uint,uint){\\r\\n        return (profileName,profileDescription,tokenIdNumber,amountPublishedVideos,subscribeAmount,amountCreator);\\r\\n    }\\r\\n\\r\\n    function getCreatorInfo() external view returns(string memory,string memory,uint){\\r\\n        return (profileName,profileDescription,subscribeAmount);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n     * \\r\\n     * @notice remove approve and transfer functions for prevent users transfer tokens.\\r\\n     * \\r\\n    */\\r\\n\\r\\n    //override approve function for prevent approve\\r\\n    function approve(address to, uint256 tokenId) public override{\\r\\n        require(false, \\\"approvals disabled.\\\");\\r\\n    }\\r\\n    //override setApprovalForAll function for prevent approve\\r\\n    function setApprovalForAll(address operator, bool approved) public override{\\r\\n        require(false, \\\"approvals disabled.\\\");\\r\\n    }\\r\\n\\r\\n    //override transferFrom function for prevent transfer\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override{\\r\\n        require(false, \\\"transfers disabled.\\\");\\r\\n    }\\r\\n\\r\\n    //override safeTransferFrom function for prevent transfer\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override{\\r\\n        require(false, \\\"transfers disabled.\\\");\\r\\n    }\\r\\n\\r\\n    //override safeTransferFrom function for prevent transfer\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override{\\r\\n        require(false, \\\"transfers disabled.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc7ff349444bacad7f77da40122ebefc6ff55f406785ecf69e921375a32041391\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000a05760003560e01c8063c2d8e1ad116200006f578063c2d8e1ad1462000155578063efd46065146200018b578063f193e1a514620001c1578063f851a44014620001f7578063f97fac4d146200021957620000a0565b806334af431d14620000a55780637103bf7414620000db5780639f08a68c14620000fb578063a0210309146200011d575b600080fd5b620000c36004803603810190620000bd9190620008bd565b6200023b565b604051620000d2919062000900565b60405180910390f35b620000f96004803603810190620000f3919062000aba565b6200026e565b005b6200010562000588565b60405162000114919062000bdd565b60405180910390f35b6200013b6004803603810190620001359190620008bd565b620005c5565b6040516200014c9392919062000c12565b60405180910390f35b6200017360048036038101906200016d919062000c5d565b6200064e565b60405162000182919062000900565b60405180910390f35b620001a96004803603810190620001a39190620008bd565b62000697565b604051620001b8919062000ccb565b60405180910390f35b620001df6004803603810190620001d9919062000ce8565b62000740565b604051620001ee919062000900565b60405180910390f35b6200020162000780565b60405162000210919062000900565b60405180910390f35b62000223620007a6565b60405162000232919062000de8565b60405180910390f35b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018460405162000282919062000e4e565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000325576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031c9062000eb7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620003f6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003ed9062000f29565b60405180910390fd5b600084338686866040516200040b9062000836565b6200041b95949392919062000f9b565b604051809103906000f08015801562000438573d6000803e3d6000fd5b50905060008190506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600187604051620004b6919062000e4e565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60606040518060400160405280601b81526020017f79657320736d61727420636f6e7472616374206465706c6f7965640000000000815250905090565b60608060008373ffffffffffffffffffffffffffffffffffffffff166335afba4a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000616573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620006419190620010b7565b9250925092509193909250565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036200073657600090506200073b565b600190505b919050565b600081815481106200075157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620007e1575b5050505050905090565b613f83806200115283390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008858262000858565b9050919050565b620008978162000878565b8114620008a357600080fd5b50565b600081359050620008b7816200088c565b92915050565b600060208284031215620008d657620008d56200084e565b5b6000620008e684828501620008a6565b91505092915050565b620008fa8162000878565b82525050565b6000602082019050620009176000830184620008ef565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620009728262000927565b810181811067ffffffffffffffff8211171562000994576200099362000938565b5b80604052505050565b6000620009a962000844565b9050620009b7828262000967565b919050565b600067ffffffffffffffff821115620009da57620009d962000938565b5b620009e58262000927565b9050602081019050919050565b82818337600083830152505050565b600062000a1862000a1284620009bc565b6200099d565b90508281526020810184848401111562000a375762000a3662000922565b5b62000a44848285620009f2565b509392505050565b600082601f83011262000a645762000a636200091d565b5b813562000a7684826020860162000a01565b91505092915050565b6000819050919050565b62000a948162000a7f565b811462000aa057600080fd5b50565b60008135905062000ab48162000a89565b92915050565b60008060006060848603121562000ad65762000ad56200084e565b5b600084013567ffffffffffffffff81111562000af75762000af662000853565b5b62000b058682870162000a4c565b935050602084013567ffffffffffffffff81111562000b295762000b2862000853565b5b62000b378682870162000a4c565b925050604062000b4a8682870162000aa3565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000b9057808201518184015260208101905062000b73565b60008484015250505050565b600062000ba98262000b54565b62000bb5818562000b5f565b935062000bc781856020860162000b70565b62000bd28162000927565b840191505092915050565b6000602082019050818103600083015262000bf9818462000b9c565b905092915050565b62000c0c8162000a7f565b82525050565b6000606082019050818103600083015262000c2e818662000b9c565b9050818103602083015262000c44818562000b9c565b905062000c55604083018462000c01565b949350505050565b60006020828403121562000c765762000c756200084e565b5b600082013567ffffffffffffffff81111562000c975762000c9662000853565b5b62000ca58482850162000a4c565b91505092915050565b60008115159050919050565b62000cc58162000cae565b82525050565b600060208201905062000ce2600083018462000cba565b92915050565b60006020828403121562000d015762000d006200084e565b5b600062000d118482850162000aa3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000d518162000878565b82525050565b600062000d65838362000d46565b60208301905092915050565b6000602082019050919050565b600062000d8b8262000d1a565b62000d97818562000d25565b935062000da48362000d36565b8060005b8381101562000ddb57815162000dbf888262000d57565b975062000dcc8362000d71565b92505060018101905062000da8565b5085935050505092915050565b6000602082019050818103600083015262000e04818462000d7e565b905092915050565b600081905092915050565b600062000e248262000b54565b62000e30818562000e0c565b935062000e4281856020860162000b70565b80840191505092915050565b600062000e5c828462000e17565b915081905092915050565b7f557365726e616d6520616c72656164792074616b656e00000000000000000000600082015250565b600062000e9f60168362000b5f565b915062000eac8262000e67565b602082019050919050565b6000602082019050818103600083015262000ed28162000e90565b9050919050565b7f6164647265737320616c72656164792068617320616e206163636f756e740000600082015250565b600062000f11601e8362000b5f565b915062000f1e8262000ed9565b602082019050919050565b6000602082019050818103600083015262000f448162000f02565b9050919050565b7f50415452454f4e00000000000000000000000000000000000000000000000000600082015250565b600062000f8360078362000b5f565b915062000f908262000f4b565b602082019050919050565b600060c082019050818103600083015262000fb7818862000b9c565b9050818103602083015262000fcc8162000f74565b905062000fdd6040830187620008ef565b818103606083015262000ff1818662000b9c565b9050818103608083015262001007818562000b9c565b90506200101860a083018462000c01565b9695505050505050565b6000620010396200103384620009bc565b6200099d565b90508281526020810184848401111562001058576200105762000922565b5b6200106584828562000b70565b509392505050565b600082601f8301126200108557620010846200091d565b5b81516200109784826020860162001022565b91505092915050565b600081519050620010b18162000a89565b92915050565b600080600060608486031215620010d357620010d26200084e565b5b600084015167ffffffffffffffff811115620010f457620010f362000853565b5b62001102868287016200106d565b935050602084015167ffffffffffffffff81111562001126576200112562000853565b5b62001134868287016200106d565b92505060406200114786828701620010a0565b915050925092509256fe60806040523480156200001157600080fd5b5060405162003f8338038062003f838339818101604052810190620000379190620003d8565b858581600090816200004a919062000731565b5080600190816200005c919062000731565b5050506200007f62000073620000d760201b60201c565b620000df60201b60201c565b6200009084620000df60201b60201c565b8260079081620000a1919062000731565b508160089081620000b3919062000731565b50620f424081620000c5919062000847565b600b8190555050505050505062000892565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020e82620001c3565b810181811067ffffffffffffffff8211171562000230576200022f620001d4565b5b80604052505050565b600062000245620001a5565b905062000253828262000203565b919050565b600067ffffffffffffffff821115620002765762000275620001d4565b5b6200028182620001c3565b9050602081019050919050565b60005b83811015620002ae57808201518184015260208101905062000291565b60008484015250505050565b6000620002d1620002cb8462000258565b62000239565b905082815260208101848484011115620002f057620002ef620001be565b5b620002fd8482856200028e565b509392505050565b600082601f8301126200031d576200031c620001b9565b5b81516200032f848260208601620002ba565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003658262000338565b9050919050565b620003778162000358565b81146200038357600080fd5b50565b60008151905062000397816200036c565b92915050565b6000819050919050565b620003b2816200039d565b8114620003be57600080fd5b50565b600081519050620003d281620003a7565b92915050565b60008060008060008060c08789031215620003f857620003f7620001af565b5b600087015167ffffffffffffffff811115620004195762000418620001b4565b5b6200042789828a0162000305565b965050602087015167ffffffffffffffff8111156200044b576200044a620001b4565b5b6200045989828a0162000305565b95505060406200046c89828a0162000386565b945050606087015167ffffffffffffffff81111562000490576200048f620001b4565b5b6200049e89828a0162000305565b935050608087015167ffffffffffffffff811115620004c257620004c1620001b4565b5b620004d089828a0162000305565b92505060a0620004e389828a01620003c1565b9150509295509295509295565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054357607f821691505b602082108103620005595762000558620004fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000584565b620005cf868362000584565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620006126200060c62000606846200039d565b620005e7565b6200039d565b9050919050565b6000819050919050565b6200062e83620005f1565b620006466200063d8262000619565b84845462000591565b825550505050565b600090565b6200065d6200064e565b6200066a81848462000623565b505050565b5b8181101562000692576200068660008262000653565b60018101905062000670565b5050565b601f821115620006e157620006ab816200055f565b620006b68462000574565b81016020851015620006c6578190505b620006de620006d58562000574565b8301826200066f565b50505b505050565b600082821c905092915050565b60006200070660001984600802620006e6565b1980831691505092915050565b6000620007218383620006f3565b9150826002028217905092915050565b6200073c82620004f0565b67ffffffffffffffff811115620007585762000757620001d4565b5b6200076482546200052a565b6200077182828562000696565b600060209050601f831160018114620007a9576000841562000794578287015190505b620007a0858262000713565b86555062000810565b601f198416620007b9866200055f565b60005b82811015620007e357848901518255600182019150602085019450602081019050620007bc565b86831015620008035784890151620007ff601f891682620006f3565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000854826200039d565b915062000861836200039d565b925082820262000871816200039d565b915082820484148315176200088b576200088a62000818565b5b5092915050565b6136e180620008a26000396000f3fe6080604052600436106101f85760003560e01c806370a082311161010d578063a3e39811116100a0578063c707944b1161006f578063c707944b146106f9578063c87b56dd14610724578063e985e9c514610761578063ed88c68e1461079e578063f2fde38b146107a8576101f8565b8063a3e398111461064f578063b1d140681461067a578063b88d4fde146106a5578063c5da7604146106ce576101f8565b8063863678e9116100dc578063863678e9146105a75780638da5cb5b146105d057806395d89b41146105fb578063a22cb46514610626576101f8565b806370a08231146104e6578063715018a6146105235780637235d7d91461053a5780638356c1e114610577576101f8565b806327e25dcc1161019057806335afba4a1161015f57806335afba4a1461043257806342842e0e1461045f578063534844a2146104885780636352211e1461049f578063671ba0e1146104dc576101f8565b806327e25dcc146103755780632a835567146103b55780632ae25fd2146103de5780632dc282e914610407576101f8565b8063095ea7b3116101cc578063095ea7b3146102cd578063130b4c09146102f65780631dbe69d41461032157806323b872dd1461034c576101f8565b8062b37044146101fd57806301ffc9a71461022857806306fdde0314610265578063081812fc14610290575b600080fd5b34801561020957600080fd5b506102126107d1565b60405161021f9190612352565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a91906123d9565b6107d7565b60405161025c9190612421565b60405180910390f35b34801561027157600080fd5b5061027a6108b9565b60405161028791906124cc565b60405180910390f35b34801561029c57600080fd5b506102b760048036038101906102b2919061251a565b61094b565b6040516102c49190612588565b60405180910390f35b3480156102d957600080fd5b506102f460048036038101906102ef91906125cf565b610991565b005b34801561030257600080fd5b5061030b6109d6565b6040516103189190612352565b60405180910390f35b34801561032d57600080fd5b506103366109dc565b604051610343919061279b565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e91906127bd565b610c0c565b005b34801561038157600080fd5b5061039c6004803603810190610397919061251a565b610c52565b6040516103ac9493929190612810565b60405180910390f35b3480156103c157600080fd5b506103dc60048036038101906103d7919061299f565b610e37565b005b3480156103ea57600080fd5b5061040560048036038101906104009190612a46565b610f61565b005b34801561041357600080fd5b5061041c610fe7565b6040516104299190612352565b60405180910390f35b34801561043e57600080fd5b50610447610fed565b60405161045693929190612a8f565b60405180910390f35b34801561046b57600080fd5b50610486600480360381019061048191906127bd565b61111c565b005b34801561049457600080fd5b5061049d611162565b005b3480156104ab57600080fd5b506104c660048036038101906104c1919061251a565b6111ca565b6040516104d39190612588565b60405180910390f35b6104e4611250565b005b3480156104f257600080fd5b5061050d60048036038101906105089190612ad4565b61134f565b60405161051a9190612352565b60405180910390f35b34801561052f57600080fd5b50610538611406565b005b34801561054657600080fd5b50610561600480360381019061055c9190612a46565b61141a565b60405161056e9190612352565b60405180910390f35b34801561058357600080fd5b5061058c611448565b60405161059e96959493929190612b01565b60405180910390f35b3480156105b357600080fd5b506105ce60048036038101906105c99190612a46565b61158d565b005b3480156105dc57600080fd5b506105e5611613565b6040516105f29190612588565b60405180910390f35b34801561060757600080fd5b5061061061163d565b60405161061d91906124cc565b60405180910390f35b34801561063257600080fd5b5061064d60048036038101906106489190612b9c565b6116cf565b005b34801561065b57600080fd5b50610664611714565b60405161067191906124cc565b60405180910390f35b34801561068657600080fd5b5061068f6117a2565b60405161069c9190612352565b60405180910390f35b3480156106b157600080fd5b506106cc60048036038101906106c79190612c7d565b6117a8565b005b3480156106da57600080fd5b506106e36117ef565b6040516106f091906124cc565b60405180910390f35b34801561070557600080fd5b5061070e61187d565b60405161071b9190612352565b60405180910390f35b34801561073057600080fd5b5061074b6004803603810190610746919061251a565b611883565b60405161075891906124cc565b60405180910390f35b34801561076d57600080fd5b5061078860048036038101906107839190612d00565b6118eb565b6040516107959190612421565b60405180910390f35b6107a661197f565b005b3480156107b457600080fd5b506107cf60048036038101906107ca9190612ad4565b6119b3565b005b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108a257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108b257506108b182611a36565b5b9050919050565b6060600080546108c890612d6f565b80601f01602080910402602001604051908101604052809291908181526020018280546108f490612d6f565b80156109415780601f1061091657610100808354040283529160200191610941565b820191906000526020600020905b81548152906001019060200180831161092457829003601f168201915b5050505050905090565b600061095682611aa0565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006109d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c990612dec565b60405180910390fd5b5050565b600b5481565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610c035783829060005260206000209060040201604051806080016040529081600082018054610a3390612d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5f90612d6f565b8015610aac5780601f10610a8157610100808354040283529160200191610aac565b820191906000526020600020905b815481529060010190602001808311610a8f57829003601f168201915b50505050508152602001600182018054610ac590612d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610af190612d6f565b8015610b3e5780601f10610b1357610100808354040283529160200191610b3e565b820191906000526020600020905b815481529060010190602001808311610b2157829003601f168201915b50505050508152602001600282018054610b5790612d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8390612d6f565b8015610bd05780601f10610ba557610100808354040283529160200191610bd0565b820191906000526020600020905b815481529060010190602001808311610bb357829003601f168201915b505050505081526020016003820160009054906101000a900460ff16151515158152505081526020019060010190610a00565b50505050905090565b6000610c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4490612e58565b60405180910390fd5b505050565b600c8181548110610c6257600080fd5b9060005260206000209060040201600091509050806000018054610c8590612d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb190612d6f565b8015610cfe5780601f10610cd357610100808354040283529160200191610cfe565b820191906000526020600020905b815481529060010190602001808311610ce157829003601f168201915b505050505090806001018054610d1390612d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3f90612d6f565b8015610d8c5780601f10610d6157610100808354040283529160200191610d8c565b820191906000526020600020905b815481529060010190602001808311610d6f57829003601f168201915b505050505090806002018054610da190612d6f565b80601f0160208091040260200160405190810160405280929190818152602001828054610dcd90612d6f565b8015610e1a5780601f10610def57610100808354040283529160200191610e1a565b820191906000526020600020905b815481529060010190602001808311610dfd57829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b610e3f611aeb565b6000600d83604051610e519190612eb4565b90815260200160405180910390205414610e6a57600080fd5b6001600a6000828254610e7d9190612efa565b92505081905550600a54600d83604051610e979190612eb4565b908152602001604051809103902081905550600c60405180608001604052808581526020018481526020018381526020016000151581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000019081610f0d91906130da565b506020820151816001019081610f2391906130da565b506040820151816002019081610f3991906130da565b5060608201518160030160006101000a81548160ff0219169083151502179055505050505050565b610f69611aeb565b6000600d82604051610f7b9190612eb4565b908152602001604051809103902054905060008111610f9957600080fd5b6000600c600183610faa91906131ac565b81548110610fbb57610fba6131e0565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505050565b600a5481565b606080600060076008600b5482805461100590612d6f565b80601f016020809104026020016040519081016040528092919081815260200182805461103190612d6f565b801561107e5780601f106110535761010080835404028352916020019161107e565b820191906000526020600020905b81548152906001019060200180831161106157829003601f168201915b5050505050925081805461109190612d6f565b80601f01602080910402602001604051908101604052809291908181526020018280546110bd90612d6f565b801561110a5780601f106110df5761010080835404028352916020019161110a565b820191906000526020600020905b8154815290600101906020018083116110ed57829003601f168201915b50505050509150925092509250909192565b600061115d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115490612e58565b60405180910390fd5b505050565b61116a611aeb565b6000611174611613565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f193505050501580156111be573d6000803e3d6000fd5b506000600e8190555050565b6000806111d683611b69565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123e9061325b565b60405180910390fd5b80915050919050565b60001515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146112ad57600080fd5b600b5434116112bb57600080fd5b60016009546112ca9190612efa565b6009819055506112dc33600954611ba6565b34600e60008282546112ee9190612efa565b925050819055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b6906132ed565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61140e611aeb565b6114186000611bc4565b565b600d818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60608060008060008060076008600954600a54600b54600e5485805461146d90612d6f565b80601f016020809104026020016040519081016040528092919081815260200182805461149990612d6f565b80156114e65780601f106114bb576101008083540402835291602001916114e6565b820191906000526020600020905b8154815290600101906020018083116114c957829003601f168201915b505050505095508480546114f990612d6f565b80601f016020809104026020016040519081016040528092919081815260200182805461152590612d6f565b80156115725780601f1061154757610100808354040283529160200191611572565b820191906000526020600020905b81548152906001019060200180831161155557829003601f168201915b50505050509450955095509550955095509550909192939495565b611595611aeb565b6000600d826040516115a79190612eb4565b9081526020016040518091039020549050600081116115c557600080fd5b6001600c6001836115d691906131ac565b815481106115e7576115e66131e0565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461164c90612d6f565b80601f016020809104026020016040519081016040528092919081815260200182805461167890612d6f565b80156116c55780601f1061169a576101008083540402835291602001916116c5565b820191906000526020600020905b8154815290600101906020018083116116a857829003601f168201915b5050505050905090565b6000611710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170790612dec565b60405180910390fd5b5050565b6008805461172190612d6f565b80601f016020809104026020016040519081016040528092919081815260200182805461174d90612d6f565b801561179a5780601f1061176f5761010080835404028352916020019161179a565b820191906000526020600020905b81548152906001019060200180831161177d57829003601f168201915b505050505081565b600e5481565b60006117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e090612e58565b60405180910390fd5b50505050565b600780546117fc90612d6f565b80601f016020809104026020016040519081016040528092919081815260200182805461182890612d6f565b80156118755780601f1061184a57610100808354040283529160200191611875565b820191906000526020600020905b81548152906001019060200180831161185857829003601f168201915b505050505081565b60095481565b606061188e82611aa0565b6000611898611c8a565b905060008151116118b857604051806020016040528060008152506118e3565b806118c284611ca1565b6040516020016118d392919061330d565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b34600e60008282546119919190612efa565b9250508190555034600f60008282546119aa9190612efa565b92505081905550565b6119bb611aeb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a21906133a3565b60405180910390fd5b611a3381611bc4565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611aa981611d6f565b611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf9061325b565b60405180910390fd5b50565b611af3611db0565b73ffffffffffffffffffffffffffffffffffffffff16611b11611613565b73ffffffffffffffffffffffffffffffffffffffff1614611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e9061340f565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611bc0828260405180602001604052806000815250611db8565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060405180602001604052806000815250905090565b606060006001611cb084611e13565b01905060008167ffffffffffffffff811115611ccf57611cce612874565b5b6040519080825280601f01601f191660200182016040528015611d015781602001600182028036833780820191505090505b509050600082602001820190505b600115611d64578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d5857611d5761342f565b5b04945060008503611d0f575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611d9183611b69565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b611dc28383611f66565b611dcf6000848484612183565b611e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e05906134d0565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611e71577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611e6757611e6661342f565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611eae576d04ee2d6d415b85acef81000000008381611ea457611ea361342f565b5b0492506020810190505b662386f26fc100008310611edd57662386f26fc100008381611ed357611ed261342f565b5b0492506010810190505b6305f5e1008310611f06576305f5e1008381611efc57611efb61342f565b5b0492506008810190505b6127108310611f2b576127108381611f2157611f2061342f565b5b0492506004810190505b60648310611f4e5760648381611f4457611f4361342f565b5b0492506002810190505b600a8310611f5d576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611fd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fcc9061353c565b60405180910390fd5b611fde81611d6f565b1561201e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612015906135a8565b60405180910390fd5b61202c60008383600161230a565b61203581611d6f565b15612075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206c906135a8565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461217f600083836001612310565b5050565b60006121a48473ffffffffffffffffffffffffffffffffffffffff16612316565b156122fd578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121cd611db0565b8786866040518563ffffffff1660e01b81526004016121ef949392919061361d565b6020604051808303816000875af192505050801561222b57506040513d601f19601f82011682018060405250810190612228919061367e565b60015b6122ad573d806000811461225b576040519150601f19603f3d011682016040523d82523d6000602084013e612260565b606091505b5060008151036122a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229c906134d0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612302565b600190505b949350505050565b50505050565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b61234c81612339565b82525050565b60006020820190506123676000830184612343565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6123b681612381565b81146123c157600080fd5b50565b6000813590506123d3816123ad565b92915050565b6000602082840312156123ef576123ee612377565b5b60006123fd848285016123c4565b91505092915050565b60008115159050919050565b61241b81612406565b82525050565b60006020820190506124366000830184612412565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561247657808201518184015260208101905061245b565b60008484015250505050565b6000601f19601f8301169050919050565b600061249e8261243c565b6124a88185612447565b93506124b8818560208601612458565b6124c181612482565b840191505092915050565b600060208201905081810360008301526124e68184612493565b905092915050565b6124f781612339565b811461250257600080fd5b50565b600081359050612514816124ee565b92915050565b6000602082840312156125305761252f612377565b5b600061253e84828501612505565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061257282612547565b9050919050565b61258281612567565b82525050565b600060208201905061259d6000830184612579565b92915050565b6125ac81612567565b81146125b757600080fd5b50565b6000813590506125c9816125a3565b92915050565b600080604083850312156125e6576125e5612377565b5b60006125f4858286016125ba565b925050602061260585828601612505565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006126578261243c565b612661818561263b565b9350612671818560208601612458565b61267a81612482565b840191505092915050565b61268e81612406565b82525050565b600060808301600083015184820360008601526126b1828261264c565b915050602083015184820360208601526126cb828261264c565b915050604083015184820360408601526126e5828261264c565b91505060608301516126fa6060860182612685565b508091505092915050565b60006127118383612694565b905092915050565b6000602082019050919050565b60006127318261260f565b61273b818561261a565b93508360208202850161274d8561262b565b8060005b85811015612789578484038952815161276a8582612705565b945061277583612719565b925060208a01995050600181019050612751565b50829750879550505050505092915050565b600060208201905081810360008301526127b58184612726565b905092915050565b6000806000606084860312156127d6576127d5612377565b5b60006127e4868287016125ba565b93505060206127f5868287016125ba565b925050604061280686828701612505565b9150509250925092565b6000608082019050818103600083015261282a8187612493565b9050818103602083015261283e8186612493565b905081810360408301526128528185612493565b90506128616060830184612412565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128ac82612482565b810181811067ffffffffffffffff821117156128cb576128ca612874565b5b80604052505050565b60006128de61236d565b90506128ea82826128a3565b919050565b600067ffffffffffffffff82111561290a57612909612874565b5b61291382612482565b9050602081019050919050565b82818337600083830152505050565b600061294261293d846128ef565b6128d4565b90508281526020810184848401111561295e5761295d61286f565b5b612969848285612920565b509392505050565b600082601f8301126129865761298561286a565b5b813561299684826020860161292f565b91505092915050565b6000806000606084860312156129b8576129b7612377565b5b600084013567ffffffffffffffff8111156129d6576129d561237c565b5b6129e286828701612971565b935050602084013567ffffffffffffffff811115612a0357612a0261237c565b5b612a0f86828701612971565b925050604084013567ffffffffffffffff811115612a3057612a2f61237c565b5b612a3c86828701612971565b9150509250925092565b600060208284031215612a5c57612a5b612377565b5b600082013567ffffffffffffffff811115612a7a57612a7961237c565b5b612a8684828501612971565b91505092915050565b60006060820190508181036000830152612aa98186612493565b90508181036020830152612abd8185612493565b9050612acc6040830184612343565b949350505050565b600060208284031215612aea57612ae9612377565b5b6000612af8848285016125ba565b91505092915050565b600060c0820190508181036000830152612b1b8189612493565b90508181036020830152612b2f8188612493565b9050612b3e6040830187612343565b612b4b6060830186612343565b612b586080830185612343565b612b6560a0830184612343565b979650505050505050565b612b7981612406565b8114612b8457600080fd5b50565b600081359050612b9681612b70565b92915050565b60008060408385031215612bb357612bb2612377565b5b6000612bc1858286016125ba565b9250506020612bd285828601612b87565b9150509250929050565b600067ffffffffffffffff821115612bf757612bf6612874565b5b612c0082612482565b9050602081019050919050565b6000612c20612c1b84612bdc565b6128d4565b905082815260208101848484011115612c3c57612c3b61286f565b5b612c47848285612920565b509392505050565b600082601f830112612c6457612c6361286a565b5b8135612c74848260208601612c0d565b91505092915050565b60008060008060808587031215612c9757612c96612377565b5b6000612ca5878288016125ba565b9450506020612cb6878288016125ba565b9350506040612cc787828801612505565b925050606085013567ffffffffffffffff811115612ce857612ce761237c565b5b612cf487828801612c4f565b91505092959194509250565b60008060408385031215612d1757612d16612377565b5b6000612d25858286016125ba565b9250506020612d36858286016125ba565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d8757607f821691505b602082108103612d9a57612d99612d40565b5b50919050565b7f617070726f76616c732064697361626c65642e00000000000000000000000000600082015250565b6000612dd6601383612447565b9150612de182612da0565b602082019050919050565b60006020820190508181036000830152612e0581612dc9565b9050919050565b7f7472616e73666572732064697361626c65642e00000000000000000000000000600082015250565b6000612e42601383612447565b9150612e4d82612e0c565b602082019050919050565b60006020820190508181036000830152612e7181612e35565b9050919050565b600081905092915050565b6000612e8e8261243c565b612e988185612e78565b9350612ea8818560208601612458565b80840191505092915050565b6000612ec08284612e83565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612f0582612339565b9150612f1083612339565b9250828201905080821115612f2857612f27612ecb565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612f907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612f53565b612f9a8683612f53565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612fd7612fd2612fcd84612339565b612fb2565b612339565b9050919050565b6000819050919050565b612ff183612fbc565b613005612ffd82612fde565b848454612f60565b825550505050565b600090565b61301a61300d565b613025818484612fe8565b505050565b5b818110156130495761303e600082613012565b60018101905061302b565b5050565b601f82111561308e5761305f81612f2e565b61306884612f43565b81016020851015613077578190505b61308b61308385612f43565b83018261302a565b50505b505050565b600082821c905092915050565b60006130b160001984600802613093565b1980831691505092915050565b60006130ca83836130a0565b9150826002028217905092915050565b6130e38261243c565b67ffffffffffffffff8111156130fc576130fb612874565b5b6131068254612d6f565b61311182828561304d565b600060209050601f8311600181146131445760008415613132578287015190505b61313c85826130be565b8655506131a4565b601f19841661315286612f2e565b60005b8281101561317a57848901518255600182019150602085019450602081019050613155565b868310156131975784890151613193601f8916826130a0565b8355505b6001600288020188555050505b505050505050565b60006131b782612339565b91506131c283612339565b92508282039050818111156131da576131d9612ecb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613245601883612447565b91506132508261320f565b602082019050919050565b6000602082019050818103600083015261327481613238565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132d7602983612447565b91506132e28261327b565b604082019050919050565b60006020820190508181036000830152613306816132ca565b9050919050565b60006133198285612e83565b91506133258284612e83565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061338d602683612447565b915061339882613331565b604082019050919050565b600060208201905081810360008301526133bc81613380565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006133f9602083612447565b9150613404826133c3565b602082019050919050565b60006020820190508181036000830152613428816133ec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134ba603283612447565b91506134c58261345e565b604082019050919050565b600060208201905081810360008301526134e9816134ad565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613526602083612447565b9150613531826134f0565b602082019050919050565b6000602082019050818103600083015261355581613519565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613592601c83612447565b915061359d8261355c565b602082019050919050565b600060208201905081810360008301526135c181613585565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006135ef826135c8565b6135f981856135d3565b9350613609818560208601612458565b61361281612482565b840191505092915050565b60006080820190506136326000830187612579565b61363f6020830186612579565b61364c6040830185612343565b818103606083015261365e81846135e4565b905095945050505050565b600081519050613678816123ad565b92915050565b60006020828403121561369457613693612377565b5b60006136a284828501613669565b9150509291505056fea264697066735822122020d82b0a1dc020963608d12b006f484d7c74fe3b60d69698be7f77aca2760e7064736f6c63430008120033a2646970667358221220d0e0b2301056772a51a3f5337927d3712b771bdffaaef2f45100a7391f1a954764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2636,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "createdProfiles",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2640,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "userProfile",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2644,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "creatorContract",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2646,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}