{
  "address": "0x662Cac2eFCcaE3188e4606116C8634f0b371bc48",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionAmount",
          "type": "uint256"
        }
      ],
      "name": "createProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "createdProfiles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creatorContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCreators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getCreator",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorAddress",
          "type": "address"
        }
      ],
      "name": "getCreatorContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "getCreatorOld",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creatorAddress",
          "type": "address"
        }
      ],
      "name": "isSignedUp",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userProfile",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "working",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb904923cc068e987470791a09fd68ed66a292dcf0a1da328327601d671e2d9fb",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xDc11dE6060e0f6011B6c07bB2C0278d7cB5B57EE",
    "contractAddress": "0x662Cac2eFCcaE3188e4606116C8634f0b371bc48",
    "transactionIndex": 1,
    "gasUsed": "5732836",
    "logsBloom": "0x
    "blockHash": "0xb9ec2367441188ecb58cfc00204f438f2a9f076cf75f750ca95b2f06d8b70eda",
    "transactionHash": "0xb904923cc068e987470791a09fd68ed66a292dcf0a1da328327601d671e2d9fb",
    "logs": [],
    "blockNumber": 20957090,
    "cumulativeGasUsed": "5732836",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 16,
  "solcInputHash": "de11cbdc8da21a0a9cc4585b4df0511e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionAmount\",\"type\":\"uint256\"}],\"name\":\"createProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdProfiles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creatorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCreators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreator\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorAddress\",\"type\":\"address\"}],\"name\":\"getCreatorContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"getCreatorOld\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creatorAddress\",\"type\":\"address\"}],\"name\":\"isSignedUp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userProfile\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"working\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UserFactory.sol\":\"UserFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/UserFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./UserProfile.sol\\\";\\r\\n\\r\\ncontract UserFactory {\\r\\n\\r\\n    address[] public createdProfiles;\\r\\n    mapping(string=>address) public userProfile;\\r\\n    mapping(address=>address) public creatorContract;\\r\\n    address public admin;\\r\\n\\r\\n    constructor(){\\r\\n        admin = msg.sender;\\r\\n    }\\r\\n\\r\\n    function createProfile(string memory _tokenName,string memory _tokenSymbol,\\r\\n    string memory _name,string memory _description,uint _subscriptionAmount) public\\r\\n    {\\r\\n        address profileAddress = userProfile[_name];\\r\\n        require(creatorContract[msg.sender] == address(0),\\\"address already has an account\\\");\\r\\n        require(profileAddress == address(0));\\r\\n        UserProfile newUser = new UserProfile(_tokenName,_tokenSymbol,msg.sender,_name,_description,_subscriptionAmount);\\r\\n        address addr = address(newUser);\\r\\n        //add the created profile to store data variables\\r\\n        createdProfiles.push(addr);\\r\\n        userProfile[_name] = addr;\\r\\n        creatorContract[msg.sender] = addr;\\r\\n    }\\r\\n    function isSignedUp(address _creatorAddress) external view returns(bool){\\r\\n        if (creatorContract[_creatorAddress] == address(0)) return false;\\r\\n        return true;\\r\\n    }\\r\\n    function getCreatorContractAddress(address _creatorAddress) external view returns(address){\\r\\n        return creatorContract[_creatorAddress];\\r\\n    }\\r\\n    function working() public pure returns(string memory){\\r\\n        return \\\"yes smartcontract deployed\\\";\\r\\n    }\\r\\n    function getAllCreators() public view returns(address[] memory){\\r\\n        return createdProfiles;\\r\\n    }\\r\\n\\r\\n    function getCreator(address _creator) public view returns(string memory,string memory,uint){\\r\\n        return UserProfile(_creator).getCreatorInfo();\\r\\n    }\\r\\n    function getCreatorOld(address _creator) public view returns(string memory,string memory,uint,uint,uint,uint){\\r\\n        return UserProfile(_creator).getProfileData();\\r\\n    }\\r\\n}\",\"keccak256\":\"0x68ca29e99649030ef9e9e98d992a5b5f8c386de5840e931971f745f901ae61b4\",\"license\":\"MIT\"},\"contracts/UserProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract UserProfile is ERC721, Ownable {\\r\\n\\r\\n    struct VideoData {\\r\\n        string name;\\r\\n        string videoURL;\\r\\n        string description;\\r\\n        bool hidden;\\r\\n        // string previewVideoImage; //??maybe\\r\\n    }\\r\\n\\r\\n    //USER PROFILE LOGIC\\r\\n    string public profileName;\\r\\n    string public profileDescription;\\r\\n\\r\\n\\r\\n    //BUISNESS LOGIC\\r\\n    uint public tokenIdNumber;//amount tokens released\\r\\n    uint public amountPublishedVideos;\\r\\n    uint public subscribeAmount; //required $ have to pay for subscribe, in drop(wei of tfuel)\\r\\n    VideoData[] public publishedVideos;\\r\\n    mapping(string=>uint) public videosIndex;\\r\\n    uint public amountCreator; //amount creator have to withdraw\\r\\n    uint public totalDonated; //total amount donated, analytics, this variable have not use yet\\r\\n    //PREVENT MULTIPLE SUBSCRIPTIONS FROM SAME USER\\r\\n    mapping(address=>bool) userSubscribed;\\r\\n\\r\\n    constructor(string memory _tokenName,string memory _tokenSymbol,address _sender,string memory _name,string memory _description,uint _subscribeAmount) ERC721(_tokenName,_tokenSymbol) \\r\\n    {\\r\\n        _transferOwnership(_sender);\\r\\n        profileName = _name;\\r\\n        profileDescription = _description;\\r\\n        subscribeAmount = _subscribeAmount * 1000000;//convert tfuel to drop\\r\\n    }\\r\\n\\r\\n\\r\\n    function userSubscribe() public payable {\\r\\n        require(userSubscribed[msg.sender] == false);\\r\\n        require(msg.value > subscribeAmount);\\r\\n        tokenIdNumber = tokenIdNumber + 1;\\r\\n        _safeMint(msg.sender, tokenIdNumber);  \\r\\n        amountCreator += msg.value;\\r\\n        userSubscribed[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function donate()public payable{\\r\\n\\r\\n        amountCreator += msg.value;\\r\\n        totalDonated += msg.value;\\r\\n\\r\\n    }\\r\\n\\r\\n    // restricted to owner\\r\\n    function addVideo(string memory _name, string memory _videoURL, string memory _description) public onlyOwner{\\r\\n        //prevent user reupload videos\\r\\n        require(videosIndex[_videoURL] == 0);\\r\\n        //index the video\\r\\n        amountPublishedVideos += 1;\\r\\n        videosIndex[_videoURL] = amountPublishedVideos;\\r\\n        //add video data\\r\\n        publishedVideos.push(VideoData(_name,_videoURL,_description,false));\\r\\n        \\r\\n    }\\r\\n\\r\\n    // restricted to owner //withdraws subscriptions and donations amount\\r\\n    function withdrawAmount() public onlyOwner{\\r\\n        address owner = owner();\\r\\n\\r\\n        payable(owner).transfer(amountCreator);\\r\\n        amountCreator = 0;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function getOwner()external view returns(address){\\r\\n        address owner = owner();\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    function getVideosData() public view returns( VideoData[] memory){\\r\\n        //IMPLEMENT QUERY BY INDEX\\r\\n\\r\\n        return publishedVideos;\\r\\n    }\\r\\n\\r\\n    function hideVideo(string memory _videoUrl) public onlyOwner{\\r\\n        //get video index\\r\\n        uint _videoIndex = videosIndex[_videoUrl];\\r\\n        //require video exists\\r\\n        require(_videoIndex > 0);\\r\\n        //mark video as hide\\r\\n        publishedVideos[_videoIndex - 1].hidden = true; //[_videoIndex - 1] because index count start at 1 for prevent bugs\\r\\n        \\r\\n    }\\r\\n\\r\\n    function showVideo(string memory _videoUrl) public onlyOwner{\\r\\n        //get video index\\r\\n        uint _videoIndex = videosIndex[_videoUrl];\\r\\n        //require video exists\\r\\n        require(_videoIndex > 0);\\r\\n        //mark video as hide\\r\\n        publishedVideos[_videoIndex - 1].hidden = false; //[_videoIndex - 1] because index count start at 1 for prevent bugs\\r\\n    }\\r\\n\\r\\n    function getProfileData() external view returns(string memory,string memory,uint,uint,uint,uint){\\r\\n        return (profileName,profileDescription,tokenIdNumber,amountPublishedVideos,subscribeAmount,amountCreator);\\r\\n    }\\r\\n\\r\\n    function getCreatorInfo() external view returns(string memory,string memory,uint){\\r\\n        return (profileName,profileDescription,subscribeAmount);\\r\\n    }\\r\\n\\r\\n    function isSubscribed(address _sender) external view returns(bool){\\r\\n        return userSubscribed[_sender];\\r\\n    }\\r\\n\\r\\n   /**\\r\\n     * \\r\\n     * @notice remove approve and transfer functions for prevent users transfer tokens.\\r\\n     * \\r\\n    */\\r\\n\\r\\n    //override approve function for prevent approve\\r\\n    function approve(address to, uint256 tokenId) public override{\\r\\n        require(false, \\\"approvals disabled.\\\");\\r\\n    }\\r\\n    //override setApprovalForAll function for prevent approve\\r\\n    function setApprovalForAll(address operator, bool approved) public override{\\r\\n        require(false, \\\"approvals disabled.\\\");\\r\\n    }\\r\\n\\r\\n    //override transferFrom function for prevent transfer\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public override{\\r\\n        require(false, \\\"transfers disabled.\\\");\\r\\n    }\\r\\n\\r\\n    //override safeTransferFrom function for prevent transfer\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override{\\r\\n        require(false, \\\"transfers disabled.\\\");\\r\\n    }\\r\\n\\r\\n    //override safeTransferFrom function for prevent transfer\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override{\\r\\n        require(false, \\\"transfers disabled.\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26af3284af18d96bf2599acc5cadea859f2f433a2d135ae48cb5c8f1a8b933b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b85760003560e01c80639f08a68c116200007b5780639f08a68c14620001ba578063a021030914620001dc578063c2d8e1ad1462000214578063f193e1a5146200024a578063f851a4401462000280578063f97fac4d14620002a257620000b8565b806312b131ab14620000bd57806322b6ffca14620000f857806334af431d146200012e5780633de6053a14620001645780637cfe4053146200019a575b600080fd5b620000db6004803603810190620000d5919062000a10565b620002c4565b604051620000ef9695949392919062000af7565b60405180910390f35b62000116600480360381019062000110919062000a10565b62000359565b60405162000125919062000b8f565b60405180910390f35b6200014c600480360381019062000146919062000a10565b62000402565b6040516200015b919062000bbd565b60405180910390f35b6200018260048036038101906200017c919062000a10565b62000435565b60405162000191919062000bbd565b60405180910390f35b620001b86004803603810190620001b2919062000d5c565b6200049e565b005b620001c462000784565b604051620001d3919062000e60565b60405180910390f35b620001fa6004803603810190620001f4919062000a10565b620007c1565b6040516200020b9392919062000e84565b60405180910390f35b6200023260048036038101906200022c919062000ecf565b6200084a565b60405162000241919062000bbd565b60405180910390f35b62000268600480360381019062000262919062000f20565b62000893565b60405162000277919062000bbd565b60405180910390f35b6200028a620008d3565b60405162000299919062000bbd565b60405180910390f35b620002ac620008f9565b604051620002bb919062001020565b60405180910390f35b6060806000806000808673ffffffffffffffffffffffffffffffffffffffff16638356c1e16040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000319573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620003449190620010d9565b95509550955095509550955091939550919395565b60008073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603620003f85760009050620003fd565b600190505b919050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600184604051620004b29190620011f5565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff16600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620005b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005ab906200125e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620005ee57600080fd5b6000868633878787604051620006049062000989565b620006159695949392919062001280565b604051809103906000f08015801562000632573d6000803e3d6000fd5b50905060008190506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600187604051620006b09190620011f5565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050505050565b60606040518060400160405280601a81526020017f79657320736d617274636f6e7472616374206465706c6f796564000000000000815250905090565b60608060008373ffffffffffffffffffffffffffffffffffffffff166335afba4a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000812573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906200083d919062001309565b9250925092509193909250565b6001818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008181548110620008a457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060008054806020026020016040519081016040528092919081815260200182805480156200097f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000934575b5050505050905090565b61406b80620013a483390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620009d882620009ab565b9050919050565b620009ea81620009cb565b8114620009f657600080fd5b50565b60008135905062000a0a81620009df565b92915050565b60006020828403121562000a295762000a28620009a1565b5b600062000a3984828501620009f9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000a7e57808201518184015260208101905062000a61565b60008484015250505050565b6000601f19601f8301169050919050565b600062000aa88262000a42565b62000ab4818562000a4d565b935062000ac681856020860162000a5e565b62000ad18162000a8a565b840191505092915050565b6000819050919050565b62000af18162000adc565b82525050565b600060c082019050818103600083015262000b13818962000a9b565b9050818103602083015262000b29818862000a9b565b905062000b3a604083018762000ae6565b62000b49606083018662000ae6565b62000b58608083018562000ae6565b62000b6760a083018462000ae6565b979650505050505050565b60008115159050919050565b62000b898162000b72565b82525050565b600060208201905062000ba6600083018462000b7e565b92915050565b62000bb781620009cb565b82525050565b600060208201905062000bd4600083018462000bac565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000c1e8262000a8a565b810181811067ffffffffffffffff8211171562000c405762000c3f62000be4565b5b80604052505050565b600062000c5562000997565b905062000c63828262000c13565b919050565b600067ffffffffffffffff82111562000c865762000c8562000be4565b5b62000c918262000a8a565b9050602081019050919050565b82818337600083830152505050565b600062000cc462000cbe8462000c68565b62000c49565b90508281526020810184848401111562000ce35762000ce262000bdf565b5b62000cf084828562000c9e565b509392505050565b600082601f83011262000d105762000d0f62000bda565b5b813562000d2284826020860162000cad565b91505092915050565b62000d368162000adc565b811462000d4257600080fd5b50565b60008135905062000d568162000d2b565b92915050565b600080600080600060a0868803121562000d7b5762000d7a620009a1565b5b600086013567ffffffffffffffff81111562000d9c5762000d9b620009a6565b5b62000daa8882890162000cf8565b955050602086013567ffffffffffffffff81111562000dce5762000dcd620009a6565b5b62000ddc8882890162000cf8565b945050604086013567ffffffffffffffff81111562000e005762000dff620009a6565b5b62000e0e8882890162000cf8565b935050606086013567ffffffffffffffff81111562000e325762000e31620009a6565b5b62000e408882890162000cf8565b925050608062000e538882890162000d45565b9150509295509295909350565b6000602082019050818103600083015262000e7c818462000a9b565b905092915050565b6000606082019050818103600083015262000ea0818662000a9b565b9050818103602083015262000eb6818562000a9b565b905062000ec7604083018462000ae6565b949350505050565b60006020828403121562000ee85762000ee7620009a1565b5b600082013567ffffffffffffffff81111562000f095762000f08620009a6565b5b62000f178482850162000cf8565b91505092915050565b60006020828403121562000f395762000f38620009a1565b5b600062000f498482850162000d45565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000f8981620009cb565b82525050565b600062000f9d838362000f7e565b60208301905092915050565b6000602082019050919050565b600062000fc38262000f52565b62000fcf818562000f5d565b935062000fdc8362000f6e565b8060005b838110156200101357815162000ff7888262000f8f565b9750620010048362000fa9565b92505060018101905062000fe0565b5085935050505092915050565b600060208201905081810360008301526200103c818462000fb6565b905092915050565b60006200105b620010558462000c68565b62000c49565b9050828152602081018484840111156200107a576200107962000bdf565b5b6200108784828562000a5e565b509392505050565b600082601f830112620010a757620010a662000bda565b5b8151620010b984826020860162001044565b91505092915050565b600081519050620010d38162000d2b565b92915050565b60008060008060008060c08789031215620010f957620010f8620009a1565b5b600087015167ffffffffffffffff8111156200111a5762001119620009a6565b5b6200112889828a016200108f565b965050602087015167ffffffffffffffff8111156200114c576200114b620009a6565b5b6200115a89828a016200108f565b95505060406200116d89828a01620010c2565b94505060606200118089828a01620010c2565b93505060806200119389828a01620010c2565b92505060a0620011a689828a01620010c2565b9150509295509295509295565b600081905092915050565b6000620011cb8262000a42565b620011d78185620011b3565b9350620011e981856020860162000a5e565b80840191505092915050565b6000620012038284620011be565b915081905092915050565b7f6164647265737320616c72656164792068617320616e206163636f756e740000600082015250565b600062001246601e8362000a4d565b915062001253826200120e565b602082019050919050565b60006020820190508181036000830152620012798162001237565b9050919050565b600060c08201905081810360008301526200129c818962000a9b565b90508181036020830152620012b2818862000a9b565b9050620012c3604083018762000bac565b8181036060830152620012d7818662000a9b565b90508181036080830152620012ed818562000a9b565b9050620012fe60a083018462000ae6565b979650505050505050565b600080600060608486031215620013255762001324620009a1565b5b600084015167ffffffffffffffff811115620013465762001345620009a6565b5b62001354868287016200108f565b935050602084015167ffffffffffffffff811115620013785762001377620009a6565b5b62001386868287016200108f565b92505060406200139986828701620010c2565b915050925092509256fe60806040523480156200001157600080fd5b506040516200406b3803806200406b8339818101604052810190620000379190620003d8565b858581600090816200004a919062000731565b5080600190816200005c919062000731565b5050506200007f62000073620000d760201b60201c565b620000df60201b60201c565b6200009084620000df60201b60201c565b8260079081620000a1919062000731565b508160089081620000b3919062000731565b50620f424081620000c5919062000847565b600b8190555050505050505062000892565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020e82620001c3565b810181811067ffffffffffffffff8211171562000230576200022f620001d4565b5b80604052505050565b600062000245620001a5565b905062000253828262000203565b919050565b600067ffffffffffffffff821115620002765762000275620001d4565b5b6200028182620001c3565b9050602081019050919050565b60005b83811015620002ae57808201518184015260208101905062000291565b60008484015250505050565b6000620002d1620002cb8462000258565b62000239565b905082815260208101848484011115620002f057620002ef620001be565b5b620002fd8482856200028e565b509392505050565b600082601f8301126200031d576200031c620001b9565b5b81516200032f848260208601620002ba565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003658262000338565b9050919050565b620003778162000358565b81146200038357600080fd5b50565b60008151905062000397816200036c565b92915050565b6000819050919050565b620003b2816200039d565b8114620003be57600080fd5b50565b600081519050620003d281620003a7565b92915050565b60008060008060008060c08789031215620003f857620003f7620001af565b5b600087015167ffffffffffffffff811115620004195762000418620001b4565b5b6200042789828a0162000305565b965050602087015167ffffffffffffffff8111156200044b576200044a620001b4565b5b6200045989828a0162000305565b95505060406200046c89828a0162000386565b945050606087015167ffffffffffffffff81111562000490576200048f620001b4565b5b6200049e89828a0162000305565b935050608087015167ffffffffffffffff811115620004c257620004c1620001b4565b5b620004d089828a0162000305565b92505060a0620004e389828a01620003c1565b9150509295509295509295565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054357607f821691505b602082108103620005595762000558620004fb565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000584565b620005cf868362000584565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620006126200060c62000606846200039d565b620005e7565b6200039d565b9050919050565b6000819050919050565b6200062e83620005f1565b620006466200063d8262000619565b84845462000591565b825550505050565b600090565b6200065d6200064e565b6200066a81848462000623565b505050565b5b8181101562000692576200068660008262000653565b60018101905062000670565b5050565b601f821115620006e157620006ab816200055f565b620006b68462000574565b81016020851015620006c6578190505b620006de620006d58562000574565b8301826200066f565b50505b505050565b600082821c905092915050565b60006200070660001984600802620006e6565b1980831691505092915050565b6000620007218383620006f3565b9150826002028217905092915050565b6200073c82620004f0565b67ffffffffffffffff811115620007585762000757620001d4565b5b6200076482546200052a565b6200077182828562000696565b600060209050601f831160018114620007a9576000841562000794578287015190505b620007a0858262000713565b86555062000810565b601f198416620007b9866200055f565b60005b82811015620007e357848901518255600182019150602085019450602081019050620007bc565b86831015620008035784890151620007ff601f891682620006f3565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000854826200039d565b915062000861836200039d565b925082820262000871816200039d565b915082820484148315176200088b576200088a62000818565b5b5092915050565b6137c980620008a26000396000f3fe60806040526004361061020e5760003560e01c8063715018a611610118578063b1d14068116100a0578063c707944b1161006f578063c707944b14610777578063c87b56dd146107a2578063e985e9c5146107df578063ed88c68e1461081c578063f2fde38b146108265761020e565b8063b1d14068146106bb578063b88d4fde146106e6578063b92ae87c1461070f578063c5da76041461074c5761020e565b8063893d20e8116100e7578063893d20e8146105e65780638da5cb5b1461061157806395d89b411461063c578063a22cb46514610667578063a3e39811146106905761020e565b8063715018a6146105395780637235d7d9146105505780638356c1e11461058d578063863678e9146105bd5761020e565b80632a8355671161019b57806342842e0e1161016a57806342842e0e14610475578063534844a21461049e5780636352211e146104b5578063671ba0e1146104f257806370a08231146104fc5761020e565b80632a835567146103cb5780632ae25fd2146103f45780632dc282e91461041d57806335afba4a146104485761020e565b8063095ea7b3116101e2578063095ea7b3146102e3578063130b4c091461030c5780631dbe69d41461033757806323b872dd1461036257806327e25dcc1461038b5761020e565b8062b370441461021357806301ffc9a71461023e57806306fdde031461027b578063081812fc146102a6575b600080fd5b34801561021f57600080fd5b5061022861084f565b604051610235919061243a565b60405180910390f35b34801561024a57600080fd5b50610265600480360381019061026091906124c1565b610855565b6040516102729190612509565b60405180910390f35b34801561028757600080fd5b50610290610937565b60405161029d91906125b4565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c89190612602565b6109c9565b6040516102da9190612670565b60405180910390f35b3480156102ef57600080fd5b5061030a600480360381019061030591906126b7565b610a0f565b005b34801561031857600080fd5b50610321610a54565b60405161032e919061243a565b60405180910390f35b34801561034357600080fd5b5061034c610a5a565b6040516103599190612883565b60405180910390f35b34801561036e57600080fd5b50610389600480360381019061038491906128a5565b610c8a565b005b34801561039757600080fd5b506103b260048036038101906103ad9190612602565b610cd0565b6040516103c294939291906128f8565b60405180910390f35b3480156103d757600080fd5b506103f260048036038101906103ed9190612a87565b610eb5565b005b34801561040057600080fd5b5061041b60048036038101906104169190612b2e565b610fdf565b005b34801561042957600080fd5b50610432611065565b60405161043f919061243a565b60405180910390f35b34801561045457600080fd5b5061045d61106b565b60405161046c93929190612b77565b60405180910390f35b34801561048157600080fd5b5061049c600480360381019061049791906128a5565b61119a565b005b3480156104aa57600080fd5b506104b36111e0565b005b3480156104c157600080fd5b506104dc60048036038101906104d79190612602565b611248565b6040516104e99190612670565b60405180910390f35b6104fa6112ce565b005b34801561050857600080fd5b50610523600480360381019061051e9190612bbc565b6113cd565b604051610530919061243a565b60405180910390f35b34801561054557600080fd5b5061054e611484565b005b34801561055c57600080fd5b5061057760048036038101906105729190612b2e565b611498565b604051610584919061243a565b60405180910390f35b34801561059957600080fd5b506105a26114c6565b6040516105b496959493929190612be9565b60405180910390f35b3480156105c957600080fd5b506105e460048036038101906105df9190612b2e565b61160b565b005b3480156105f257600080fd5b506105fb611691565b6040516106089190612670565b60405180910390f35b34801561061d57600080fd5b506106266116a5565b6040516106339190612670565b60405180910390f35b34801561064857600080fd5b506106516116cf565b60405161065e91906125b4565b60405180910390f35b34801561067357600080fd5b5061068e60048036038101906106899190612c84565b611761565b005b34801561069c57600080fd5b506106a56117a6565b6040516106b291906125b4565b60405180910390f35b3480156106c757600080fd5b506106d0611834565b6040516106dd919061243a565b60405180910390f35b3480156106f257600080fd5b5061070d60048036038101906107089190612d65565b61183a565b005b34801561071b57600080fd5b5061073660048036038101906107319190612bbc565b611881565b6040516107439190612509565b60405180910390f35b34801561075857600080fd5b506107616118d7565b60405161076e91906125b4565b60405180910390f35b34801561078357600080fd5b5061078c611965565b604051610799919061243a565b60405180910390f35b3480156107ae57600080fd5b506107c960048036038101906107c49190612602565b61196b565b6040516107d691906125b4565b60405180910390f35b3480156107eb57600080fd5b5061080660048036038101906108019190612de8565b6119d3565b6040516108139190612509565b60405180910390f35b610824611a67565b005b34801561083257600080fd5b5061084d60048036038101906108489190612bbc565b611a9b565b005b600f5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061092057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610930575061092f82611b1e565b5b9050919050565b60606000805461094690612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461097290612e57565b80156109bf5780601f10610994576101008083540402835291602001916109bf565b820191906000526020600020905b8154815290600101906020018083116109a257829003601f168201915b5050505050905090565b60006109d482611b88565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4790612ed4565b60405180910390fd5b5050565b600b5481565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610c815783829060005260206000209060040201604051806080016040529081600082018054610ab190612e57565b80601f0160208091040260200160405190810160405280929190818152602001828054610add90612e57565b8015610b2a5780601f10610aff57610100808354040283529160200191610b2a565b820191906000526020600020905b815481529060010190602001808311610b0d57829003601f168201915b50505050508152602001600182018054610b4390612e57565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6f90612e57565b8015610bbc5780601f10610b9157610100808354040283529160200191610bbc565b820191906000526020600020905b815481529060010190602001808311610b9f57829003601f168201915b50505050508152602001600282018054610bd590612e57565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0190612e57565b8015610c4e5780601f10610c2357610100808354040283529160200191610c4e565b820191906000526020600020905b815481529060010190602001808311610c3157829003601f168201915b505050505081526020016003820160009054906101000a900460ff16151515158152505081526020019060010190610a7e565b50505050905090565b6000610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612f40565b60405180910390fd5b505050565b600c8181548110610ce057600080fd5b9060005260206000209060040201600091509050806000018054610d0390612e57565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2f90612e57565b8015610d7c5780601f10610d5157610100808354040283529160200191610d7c565b820191906000526020600020905b815481529060010190602001808311610d5f57829003601f168201915b505050505090806001018054610d9190612e57565b80601f0160208091040260200160405190810160405280929190818152602001828054610dbd90612e57565b8015610e0a5780601f10610ddf57610100808354040283529160200191610e0a565b820191906000526020600020905b815481529060010190602001808311610ded57829003601f168201915b505050505090806002018054610e1f90612e57565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4b90612e57565b8015610e985780601f10610e6d57610100808354040283529160200191610e98565b820191906000526020600020905b815481529060010190602001808311610e7b57829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b610ebd611bd3565b6000600d83604051610ecf9190612f9c565b90815260200160405180910390205414610ee857600080fd5b6001600a6000828254610efb9190612fe2565b92505081905550600a54600d83604051610f159190612f9c565b908152602001604051809103902081905550600c60405180608001604052808581526020018481526020018381526020016000151581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000019081610f8b91906131c2565b506020820151816001019081610fa191906131c2565b506040820151816002019081610fb791906131c2565b5060608201518160030160006101000a81548160ff0219169083151502179055505050505050565b610fe7611bd3565b6000600d82604051610ff99190612f9c565b90815260200160405180910390205490506000811161101757600080fd5b6000600c6001836110289190613294565b81548110611039576110386132c8565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505050565b600a5481565b606080600060076008600b5482805461108390612e57565b80601f01602080910402602001604051908101604052809291908181526020018280546110af90612e57565b80156110fc5780601f106110d1576101008083540402835291602001916110fc565b820191906000526020600020905b8154815290600101906020018083116110df57829003601f168201915b5050505050925081805461110f90612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461113b90612e57565b80156111885780601f1061115d57610100808354040283529160200191611188565b820191906000526020600020905b81548152906001019060200180831161116b57829003601f168201915b50505050509150925092509250909192565b60006111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d290612f40565b60405180910390fd5b505050565b6111e8611bd3565b60006111f26116a5565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600e549081150290604051600060405180830381858888f1935050505015801561123c573d6000803e3d6000fd5b506000600e8190555050565b60008061125483611c51565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc90613343565b60405180910390fd5b80915050919050565b60001515601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461132b57600080fd5b600b54341161133957600080fd5b60016009546113489190612fe2565b60098190555061135a33600954611c8e565b34600e600082825461136c9190612fe2565b925050819055506001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361143d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611434906133d5565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61148c611bd3565b6114966000611cac565b565b600d818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60608060008060008060076008600954600a54600b54600e548580546114eb90612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461151790612e57565b80156115645780601f1061153957610100808354040283529160200191611564565b820191906000526020600020905b81548152906001019060200180831161154757829003601f168201915b5050505050955084805461157790612e57565b80601f01602080910402602001604051908101604052809291908181526020018280546115a390612e57565b80156115f05780601f106115c5576101008083540402835291602001916115f0565b820191906000526020600020905b8154815290600101906020018083116115d357829003601f168201915b50505050509450955095509550955095509550909192939495565b611613611bd3565b6000600d826040516116259190612f9c565b90815260200160405180910390205490506000811161164357600080fd5b6001600c6001836116549190613294565b81548110611665576116646132c8565b5b906000526020600020906004020160030160006101000a81548160ff0219169083151502179055505050565b60008061169c6116a5565b90508091505090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546116de90612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461170a90612e57565b80156117575780601f1061172c57610100808354040283529160200191611757565b820191906000526020600020905b81548152906001019060200180831161173a57829003601f168201915b5050505050905090565b60006117a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179990612ed4565b60405180910390fd5b5050565b600880546117b390612e57565b80601f01602080910402602001604051908101604052809291908181526020018280546117df90612e57565b801561182c5780601f106118015761010080835404028352916020019161182c565b820191906000526020600020905b81548152906001019060200180831161180f57829003601f168201915b505050505081565b600e5481565b600061187b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187290612f40565b60405180910390fd5b50505050565b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600780546118e490612e57565b80601f016020809104026020016040519081016040528092919081815260200182805461191090612e57565b801561195d5780601f106119325761010080835404028352916020019161195d565b820191906000526020600020905b81548152906001019060200180831161194057829003601f168201915b505050505081565b60095481565b606061197682611b88565b6000611980611d72565b905060008151116119a057604051806020016040528060008152506119cb565b806119aa84611d89565b6040516020016119bb9291906133f5565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b34600e6000828254611a799190612fe2565b9250508190555034600f6000828254611a929190612fe2565b92505081905550565b611aa3611bd3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b099061348b565b60405180910390fd5b611b1b81611cac565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611b9181611e57565b611bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc790613343565b60405180910390fd5b50565b611bdb611e98565b73ffffffffffffffffffffffffffffffffffffffff16611bf96116a5565b73ffffffffffffffffffffffffffffffffffffffff1614611c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c46906134f7565b60405180910390fd5b565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b611ca8828260405180602001604052806000815250611ea0565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b606060405180602001604052806000815250905090565b606060006001611d9884611efb565b01905060008167ffffffffffffffff811115611db757611db661295c565b5b6040519080825280601f01601f191660200182016040528015611de95781602001600182028036833780820191505090505b509050600082602001820190505b600115611e4c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611e4057611e3f613517565b5b04945060008503611df7575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611e7983611c51565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b611eaa838361204e565b611eb7600084848461226b565b611ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eed906135b8565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f59577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f4f57611f4e613517565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f96576d04ee2d6d415b85acef81000000008381611f8c57611f8b613517565b5b0492506020810190505b662386f26fc100008310611fc557662386f26fc100008381611fbb57611fba613517565b5b0492506010810190505b6305f5e1008310611fee576305f5e1008381611fe457611fe3613517565b5b0492506008810190505b612710831061201357612710838161200957612008613517565b5b0492506004810190505b60648310612036576064838161202c5761202b613517565b5b0492506002810190505b600a8310612045576001810190505b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036120bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b490613624565b60405180910390fd5b6120c681611e57565b15612106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fd90613690565b60405180910390fd5b6121146000838360016123f2565b61211d81611e57565b1561215d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215490613690565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122676000838360016123f8565b5050565b600061228c8473ffffffffffffffffffffffffffffffffffffffff166123fe565b156123e5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026122b5611e98565b8786866040518563ffffffff1660e01b81526004016122d79493929190613705565b6020604051808303816000875af192505050801561231357506040513d601f19601f820116820180604052508101906123109190613766565b60015b612395573d8060008114612343576040519150601f19603f3d011682016040523d82523d6000602084013e612348565b606091505b50600081510361238d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612384906135b8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506123ea565b600190505b949350505050565b50505050565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b61243481612421565b82525050565b600060208201905061244f600083018461242b565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61249e81612469565b81146124a957600080fd5b50565b6000813590506124bb81612495565b92915050565b6000602082840312156124d7576124d661245f565b5b60006124e5848285016124ac565b91505092915050565b60008115159050919050565b612503816124ee565b82525050565b600060208201905061251e60008301846124fa565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561255e578082015181840152602081019050612543565b60008484015250505050565b6000601f19601f8301169050919050565b600061258682612524565b612590818561252f565b93506125a0818560208601612540565b6125a98161256a565b840191505092915050565b600060208201905081810360008301526125ce818461257b565b905092915050565b6125df81612421565b81146125ea57600080fd5b50565b6000813590506125fc816125d6565b92915050565b6000602082840312156126185761261761245f565b5b6000612626848285016125ed565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061265a8261262f565b9050919050565b61266a8161264f565b82525050565b60006020820190506126856000830184612661565b92915050565b6126948161264f565b811461269f57600080fd5b50565b6000813590506126b18161268b565b92915050565b600080604083850312156126ce576126cd61245f565b5b60006126dc858286016126a2565b92505060206126ed858286016125ed565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061273f82612524565b6127498185612723565b9350612759818560208601612540565b6127628161256a565b840191505092915050565b612776816124ee565b82525050565b600060808301600083015184820360008601526127998282612734565b915050602083015184820360208601526127b38282612734565b915050604083015184820360408601526127cd8282612734565b91505060608301516127e2606086018261276d565b508091505092915050565b60006127f9838361277c565b905092915050565b6000602082019050919050565b6000612819826126f7565b6128238185612702565b93508360208202850161283585612713565b8060005b85811015612871578484038952815161285285826127ed565b945061285d83612801565b925060208a01995050600181019050612839565b50829750879550505050505092915050565b6000602082019050818103600083015261289d818461280e565b905092915050565b6000806000606084860312156128be576128bd61245f565b5b60006128cc868287016126a2565b93505060206128dd868287016126a2565b92505060406128ee868287016125ed565b9150509250925092565b60006080820190508181036000830152612912818761257b565b90508181036020830152612926818661257b565b9050818103604083015261293a818561257b565b905061294960608301846124fa565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6129948261256a565b810181811067ffffffffffffffff821117156129b3576129b261295c565b5b80604052505050565b60006129c6612455565b90506129d2828261298b565b919050565b600067ffffffffffffffff8211156129f2576129f161295c565b5b6129fb8261256a565b9050602081019050919050565b82818337600083830152505050565b6000612a2a612a25846129d7565b6129bc565b905082815260208101848484011115612a4657612a45612957565b5b612a51848285612a08565b509392505050565b600082601f830112612a6e57612a6d612952565b5b8135612a7e848260208601612a17565b91505092915050565b600080600060608486031215612aa057612a9f61245f565b5b600084013567ffffffffffffffff811115612abe57612abd612464565b5b612aca86828701612a59565b935050602084013567ffffffffffffffff811115612aeb57612aea612464565b5b612af786828701612a59565b925050604084013567ffffffffffffffff811115612b1857612b17612464565b5b612b2486828701612a59565b9150509250925092565b600060208284031215612b4457612b4361245f565b5b600082013567ffffffffffffffff811115612b6257612b61612464565b5b612b6e84828501612a59565b91505092915050565b60006060820190508181036000830152612b91818661257b565b90508181036020830152612ba5818561257b565b9050612bb4604083018461242b565b949350505050565b600060208284031215612bd257612bd161245f565b5b6000612be0848285016126a2565b91505092915050565b600060c0820190508181036000830152612c03818961257b565b90508181036020830152612c17818861257b565b9050612c26604083018761242b565b612c33606083018661242b565b612c40608083018561242b565b612c4d60a083018461242b565b979650505050505050565b612c61816124ee565b8114612c6c57600080fd5b50565b600081359050612c7e81612c58565b92915050565b60008060408385031215612c9b57612c9a61245f565b5b6000612ca9858286016126a2565b9250506020612cba85828601612c6f565b9150509250929050565b600067ffffffffffffffff821115612cdf57612cde61295c565b5b612ce88261256a565b9050602081019050919050565b6000612d08612d0384612cc4565b6129bc565b905082815260208101848484011115612d2457612d23612957565b5b612d2f848285612a08565b509392505050565b600082601f830112612d4c57612d4b612952565b5b8135612d5c848260208601612cf5565b91505092915050565b60008060008060808587031215612d7f57612d7e61245f565b5b6000612d8d878288016126a2565b9450506020612d9e878288016126a2565b9350506040612daf878288016125ed565b925050606085013567ffffffffffffffff811115612dd057612dcf612464565b5b612ddc87828801612d37565b91505092959194509250565b60008060408385031215612dff57612dfe61245f565b5b6000612e0d858286016126a2565b9250506020612e1e858286016126a2565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e6f57607f821691505b602082108103612e8257612e81612e28565b5b50919050565b7f617070726f76616c732064697361626c65642e00000000000000000000000000600082015250565b6000612ebe60138361252f565b9150612ec982612e88565b602082019050919050565b60006020820190508181036000830152612eed81612eb1565b9050919050565b7f7472616e73666572732064697361626c65642e00000000000000000000000000600082015250565b6000612f2a60138361252f565b9150612f3582612ef4565b602082019050919050565b60006020820190508181036000830152612f5981612f1d565b9050919050565b600081905092915050565b6000612f7682612524565b612f808185612f60565b9350612f90818560208601612540565b80840191505092915050565b6000612fa88284612f6b565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fed82612421565b9150612ff883612421565b92508282019050808211156130105761300f612fb3565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130787fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261303b565b613082868361303b565b95508019841693508086168417925050509392505050565b6000819050919050565b60006130bf6130ba6130b584612421565b61309a565b612421565b9050919050565b6000819050919050565b6130d9836130a4565b6130ed6130e5826130c6565b848454613048565b825550505050565b600090565b6131026130f5565b61310d8184846130d0565b505050565b5b81811015613131576131266000826130fa565b600181019050613113565b5050565b601f8211156131765761314781613016565b6131508461302b565b8101602085101561315f578190505b61317361316b8561302b565b830182613112565b50505b505050565b600082821c905092915050565b60006131996000198460080261317b565b1980831691505092915050565b60006131b28383613188565b9150826002028217905092915050565b6131cb82612524565b67ffffffffffffffff8111156131e4576131e361295c565b5b6131ee8254612e57565b6131f9828285613135565b600060209050601f83116001811461322c576000841561321a578287015190505b61322485826131a6565b86555061328c565b601f19841661323a86613016565b60005b828110156132625784890151825560018201915060208501945060208101905061323d565b8683101561327f578489015161327b601f891682613188565b8355505b6001600288020188555050505b505050505050565b600061329f82612421565b91506132aa83612421565b92508282039050818111156132c2576132c1612fb3565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061332d60188361252f565b9150613338826132f7565b602082019050919050565b6000602082019050818103600083015261335c81613320565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006133bf60298361252f565b91506133ca82613363565b604082019050919050565b600060208201905081810360008301526133ee816133b2565b9050919050565b60006134018285612f6b565b915061340d8284612f6b565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061347560268361252f565b915061348082613419565b604082019050919050565b600060208201905081810360008301526134a481613468565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006134e160208361252f565b91506134ec826134ab565b602082019050919050565b60006020820190508181036000830152613510816134d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006135a260328361252f565b91506135ad82613546565b604082019050919050565b600060208201905081810360008301526135d181613595565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061360e60208361252f565b9150613619826135d8565b602082019050919050565b6000602082019050818103600083015261363d81613601565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061367a601c8361252f565b915061368582613644565b602082019050919050565b600060208201905081810360008301526136a98161366d565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006136d7826136b0565b6136e181856136bb565b93506136f1818560208601612540565b6136fa8161256a565b840191505092915050565b600060808201905061371a6000830187612661565b6137276020830186612661565b613734604083018561242b565b818103606083015261374681846136cc565b905095945050505050565b60008151905061376081612495565b92915050565b60006020828403121561377c5761377b61245f565b5b600061378a84828501613751565b9150509291505056fea26469706673582212205e9f27f83261c764244726d214cd8db052235c15d5f9990f6e5af0c90bf8eb7a64736f6c63430008120033a26469706673582212203b167867d52e51f70ef986f8853f54c15a5e9bf662fd3d5105f89337064a8eff64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2636,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "createdProfiles",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2640,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "userProfile",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2644,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "creatorContract",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2646,
        "contract": "contracts/UserFactory.sol:UserFactory",
        "label": "admin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}